"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.se_DeleteLoadBalancerCommand = exports.se_DeleteKnownHostKeysCommand = exports.se_DeleteKeyPairCommand = exports.se_DeleteInstanceSnapshotCommand = exports.se_DeleteInstanceCommand = exports.se_DeleteDomainEntryCommand = exports.se_DeleteDomainCommand = exports.se_DeleteDistributionCommand = exports.se_DeleteDiskSnapshotCommand = exports.se_DeleteDiskCommand = exports.se_DeleteContainerServiceCommand = exports.se_DeleteContainerImageCommand = exports.se_DeleteContactMethodCommand = exports.se_DeleteCertificateCommand = exports.se_DeleteBucketAccessKeyCommand = exports.se_DeleteBucketCommand = exports.se_DeleteAutoSnapshotCommand = exports.se_DeleteAlarmCommand = exports.se_CreateRelationalDatabaseSnapshotCommand = exports.se_CreateRelationalDatabaseFromSnapshotCommand = exports.se_CreateRelationalDatabaseCommand = exports.se_CreateLoadBalancerTlsCertificateCommand = exports.se_CreateLoadBalancerCommand = exports.se_CreateKeyPairCommand = exports.se_CreateInstanceSnapshotCommand = exports.se_CreateInstancesFromSnapshotCommand = exports.se_CreateInstancesCommand = exports.se_CreateGUISessionAccessDetailsCommand = exports.se_CreateDomainEntryCommand = exports.se_CreateDomainCommand = exports.se_CreateDistributionCommand = exports.se_CreateDiskSnapshotCommand = exports.se_CreateDiskFromSnapshotCommand = exports.se_CreateDiskCommand = exports.se_CreateContainerServiceRegistryLoginCommand = exports.se_CreateContainerServiceDeploymentCommand = exports.se_CreateContainerServiceCommand = exports.se_CreateContactMethodCommand = exports.se_CreateCloudFormationStackCommand = exports.se_CreateCertificateCommand = exports.se_CreateBucketAccessKeyCommand = exports.se_CreateBucketCommand = exports.se_CopySnapshotCommand = exports.se_CloseInstancePublicPortsCommand = exports.se_AttachStaticIpCommand = exports.se_AttachLoadBalancerTlsCertificateCommand = exports.se_AttachInstancesToLoadBalancerCommand = exports.se_AttachDiskCommand = exports.se_AttachCertificateToDistributionCommand = exports.se_AllocateStaticIpCommand = void 0;
exports.se_GetInstanceStateCommand = exports.se_GetInstanceSnapshotsCommand = exports.se_GetInstanceSnapshotCommand = exports.se_GetInstancesCommand = exports.se_GetInstancePortStatesCommand = exports.se_GetInstanceMetricDataCommand = exports.se_GetInstanceAccessDetailsCommand = exports.se_GetInstanceCommand = exports.se_GetExportSnapshotRecordsCommand = exports.se_GetDomainsCommand = exports.se_GetDomainCommand = exports.se_GetDistributionsCommand = exports.se_GetDistributionMetricDataCommand = exports.se_GetDistributionLatestCacheResetCommand = exports.se_GetDistributionBundlesCommand = exports.se_GetDiskSnapshotsCommand = exports.se_GetDiskSnapshotCommand = exports.se_GetDisksCommand = exports.se_GetDiskCommand = exports.se_GetCostEstimateCommand = exports.se_GetContainerServicesCommand = exports.se_GetContainerServicePowersCommand = exports.se_GetContainerServiceMetricDataCommand = exports.se_GetContainerServiceDeploymentsCommand = exports.se_GetContainerLogCommand = exports.se_GetContainerImagesCommand = exports.se_GetContainerAPIMetadataCommand = exports.se_GetContactMethodsCommand = exports.se_GetCloudFormationStackRecordsCommand = exports.se_GetCertificatesCommand = exports.se_GetBundlesCommand = exports.se_GetBucketsCommand = exports.se_GetBucketMetricDataCommand = exports.se_GetBucketBundlesCommand = exports.se_GetBucketAccessKeysCommand = exports.se_GetBlueprintsCommand = exports.se_GetAutoSnapshotsCommand = exports.se_GetAlarmsCommand = exports.se_GetActiveNamesCommand = exports.se_ExportSnapshotCommand = exports.se_EnableAddOnCommand = exports.se_DownloadDefaultKeyPairCommand = exports.se_DisableAddOnCommand = exports.se_DetachStaticIpCommand = exports.se_DetachInstancesFromLoadBalancerCommand = exports.se_DetachDiskCommand = exports.se_DetachCertificateFromDistributionCommand = exports.se_DeleteRelationalDatabaseSnapshotCommand = exports.se_DeleteRelationalDatabaseCommand = exports.se_DeleteLoadBalancerTlsCertificateCommand = void 0;
exports.se_UpdateBucketCommand = exports.se_UntagResourceCommand = exports.se_UnpeerVpcCommand = exports.se_TestAlarmCommand = exports.se_TagResourceCommand = exports.se_StopRelationalDatabaseCommand = exports.se_StopInstanceCommand = exports.se_StopGUISessionCommand = exports.se_StartRelationalDatabaseCommand = exports.se_StartInstanceCommand = exports.se_StartGUISessionCommand = exports.se_SetResourceAccessForBucketCommand = exports.se_SetIpAddressTypeCommand = exports.se_SendContactMethodVerificationCommand = exports.se_ResetDistributionCacheCommand = exports.se_ReleaseStaticIpCommand = exports.se_RegisterContainerImageCommand = exports.se_RebootRelationalDatabaseCommand = exports.se_RebootInstanceCommand = exports.se_PutInstancePublicPortsCommand = exports.se_PutAlarmCommand = exports.se_PeerVpcCommand = exports.se_OpenInstancePublicPortsCommand = exports.se_IsVpcPeeredCommand = exports.se_ImportKeyPairCommand = exports.se_GetStaticIpsCommand = exports.se_GetStaticIpCommand = exports.se_GetRelationalDatabaseSnapshotsCommand = exports.se_GetRelationalDatabaseSnapshotCommand = exports.se_GetRelationalDatabasesCommand = exports.se_GetRelationalDatabaseParametersCommand = exports.se_GetRelationalDatabaseMetricDataCommand = exports.se_GetRelationalDatabaseMasterUserPasswordCommand = exports.se_GetRelationalDatabaseLogStreamsCommand = exports.se_GetRelationalDatabaseLogEventsCommand = exports.se_GetRelationalDatabaseEventsCommand = exports.se_GetRelationalDatabaseBundlesCommand = exports.se_GetRelationalDatabaseBlueprintsCommand = exports.se_GetRelationalDatabaseCommand = exports.se_GetRegionsCommand = exports.se_GetOperationsForResourceCommand = exports.se_GetOperationsCommand = exports.se_GetOperationCommand = exports.se_GetLoadBalancerTlsPoliciesCommand = exports.se_GetLoadBalancerTlsCertificatesCommand = exports.se_GetLoadBalancersCommand = exports.se_GetLoadBalancerMetricDataCommand = exports.se_GetLoadBalancerCommand = exports.se_GetKeyPairsCommand = exports.se_GetKeyPairCommand = void 0;
exports.de_DeleteDiskCommand = exports.de_DeleteContainerServiceCommand = exports.de_DeleteContainerImageCommand = exports.de_DeleteContactMethodCommand = exports.de_DeleteCertificateCommand = exports.de_DeleteBucketAccessKeyCommand = exports.de_DeleteBucketCommand = exports.de_DeleteAutoSnapshotCommand = exports.de_DeleteAlarmCommand = exports.de_CreateRelationalDatabaseSnapshotCommand = exports.de_CreateRelationalDatabaseFromSnapshotCommand = exports.de_CreateRelationalDatabaseCommand = exports.de_CreateLoadBalancerTlsCertificateCommand = exports.de_CreateLoadBalancerCommand = exports.de_CreateKeyPairCommand = exports.de_CreateInstanceSnapshotCommand = exports.de_CreateInstancesFromSnapshotCommand = exports.de_CreateInstancesCommand = exports.de_CreateGUISessionAccessDetailsCommand = exports.de_CreateDomainEntryCommand = exports.de_CreateDomainCommand = exports.de_CreateDistributionCommand = exports.de_CreateDiskSnapshotCommand = exports.de_CreateDiskFromSnapshotCommand = exports.de_CreateDiskCommand = exports.de_CreateContainerServiceRegistryLoginCommand = exports.de_CreateContainerServiceDeploymentCommand = exports.de_CreateContainerServiceCommand = exports.de_CreateContactMethodCommand = exports.de_CreateCloudFormationStackCommand = exports.de_CreateCertificateCommand = exports.de_CreateBucketAccessKeyCommand = exports.de_CreateBucketCommand = exports.de_CopySnapshotCommand = exports.de_CloseInstancePublicPortsCommand = exports.de_AttachStaticIpCommand = exports.de_AttachLoadBalancerTlsCertificateCommand = exports.de_AttachInstancesToLoadBalancerCommand = exports.de_AttachDiskCommand = exports.de_AttachCertificateToDistributionCommand = exports.de_AllocateStaticIpCommand = exports.se_UpdateRelationalDatabaseParametersCommand = exports.se_UpdateRelationalDatabaseCommand = exports.se_UpdateLoadBalancerAttributeCommand = exports.se_UpdateInstanceMetadataOptionsCommand = exports.se_UpdateDomainEntryCommand = exports.se_UpdateDistributionBundleCommand = exports.se_UpdateDistributionCommand = exports.se_UpdateContainerServiceCommand = exports.se_UpdateBucketBundleCommand = void 0;
exports.de_GetDomainsCommand = exports.de_GetDomainCommand = exports.de_GetDistributionsCommand = exports.de_GetDistributionMetricDataCommand = exports.de_GetDistributionLatestCacheResetCommand = exports.de_GetDistributionBundlesCommand = exports.de_GetDiskSnapshotsCommand = exports.de_GetDiskSnapshotCommand = exports.de_GetDisksCommand = exports.de_GetDiskCommand = exports.de_GetCostEstimateCommand = exports.de_GetContainerServicesCommand = exports.de_GetContainerServicePowersCommand = exports.de_GetContainerServiceMetricDataCommand = exports.de_GetContainerServiceDeploymentsCommand = exports.de_GetContainerLogCommand = exports.de_GetContainerImagesCommand = exports.de_GetContainerAPIMetadataCommand = exports.de_GetContactMethodsCommand = exports.de_GetCloudFormationStackRecordsCommand = exports.de_GetCertificatesCommand = exports.de_GetBundlesCommand = exports.de_GetBucketsCommand = exports.de_GetBucketMetricDataCommand = exports.de_GetBucketBundlesCommand = exports.de_GetBucketAccessKeysCommand = exports.de_GetBlueprintsCommand = exports.de_GetAutoSnapshotsCommand = exports.de_GetAlarmsCommand = exports.de_GetActiveNamesCommand = exports.de_ExportSnapshotCommand = exports.de_EnableAddOnCommand = exports.de_DownloadDefaultKeyPairCommand = exports.de_DisableAddOnCommand = exports.de_DetachStaticIpCommand = exports.de_DetachInstancesFromLoadBalancerCommand = exports.de_DetachDiskCommand = exports.de_DetachCertificateFromDistributionCommand = exports.de_DeleteRelationalDatabaseSnapshotCommand = exports.de_DeleteRelationalDatabaseCommand = exports.de_DeleteLoadBalancerTlsCertificateCommand = exports.de_DeleteLoadBalancerCommand = exports.de_DeleteKnownHostKeysCommand = exports.de_DeleteKeyPairCommand = exports.de_DeleteInstanceSnapshotCommand = exports.de_DeleteInstanceCommand = exports.de_DeleteDomainEntryCommand = exports.de_DeleteDomainCommand = exports.de_DeleteDistributionCommand = exports.de_DeleteDiskSnapshotCommand = void 0;
exports.de_StartInstanceCommand = exports.de_StartGUISessionCommand = exports.de_SetResourceAccessForBucketCommand = exports.de_SetIpAddressTypeCommand = exports.de_SendContactMethodVerificationCommand = exports.de_ResetDistributionCacheCommand = exports.de_ReleaseStaticIpCommand = exports.de_RegisterContainerImageCommand = exports.de_RebootRelationalDatabaseCommand = exports.de_RebootInstanceCommand = exports.de_PutInstancePublicPortsCommand = exports.de_PutAlarmCommand = exports.de_PeerVpcCommand = exports.de_OpenInstancePublicPortsCommand = exports.de_IsVpcPeeredCommand = exports.de_ImportKeyPairCommand = exports.de_GetStaticIpsCommand = exports.de_GetStaticIpCommand = exports.de_GetRelationalDatabaseSnapshotsCommand = exports.de_GetRelationalDatabaseSnapshotCommand = exports.de_GetRelationalDatabasesCommand = exports.de_GetRelationalDatabaseParametersCommand = exports.de_GetRelationalDatabaseMetricDataCommand = exports.de_GetRelationalDatabaseMasterUserPasswordCommand = exports.de_GetRelationalDatabaseLogStreamsCommand = exports.de_GetRelationalDatabaseLogEventsCommand = exports.de_GetRelationalDatabaseEventsCommand = exports.de_GetRelationalDatabaseBundlesCommand = exports.de_GetRelationalDatabaseBlueprintsCommand = exports.de_GetRelationalDatabaseCommand = exports.de_GetRegionsCommand = exports.de_GetOperationsForResourceCommand = exports.de_GetOperationsCommand = exports.de_GetOperationCommand = exports.de_GetLoadBalancerTlsPoliciesCommand = exports.de_GetLoadBalancerTlsCertificatesCommand = exports.de_GetLoadBalancersCommand = exports.de_GetLoadBalancerMetricDataCommand = exports.de_GetLoadBalancerCommand = exports.de_GetKeyPairsCommand = exports.de_GetKeyPairCommand = exports.de_GetInstanceStateCommand = exports.de_GetInstanceSnapshotsCommand = exports.de_GetInstanceSnapshotCommand = exports.de_GetInstancesCommand = exports.de_GetInstancePortStatesCommand = exports.de_GetInstanceMetricDataCommand = exports.de_GetInstanceAccessDetailsCommand = exports.de_GetInstanceCommand = exports.de_GetExportSnapshotRecordsCommand = void 0;
exports.de_UpdateRelationalDatabaseParametersCommand = exports.de_UpdateRelationalDatabaseCommand = exports.de_UpdateLoadBalancerAttributeCommand = exports.de_UpdateInstanceMetadataOptionsCommand = exports.de_UpdateDomainEntryCommand = exports.de_UpdateDistributionBundleCommand = exports.de_UpdateDistributionCommand = exports.de_UpdateContainerServiceCommand = exports.de_UpdateBucketBundleCommand = exports.de_UpdateBucketCommand = exports.de_UntagResourceCommand = exports.de_UnpeerVpcCommand = exports.de_TestAlarmCommand = exports.de_TagResourceCommand = exports.de_StopRelationalDatabaseCommand = exports.de_StopInstanceCommand = exports.de_StopGUISessionCommand = exports.de_StartRelationalDatabaseCommand = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const protocol_http_1 = require("@smithy/protocol-http");
const LightsailServiceException_1 = require("../models/LightsailServiceException");
const models_0_1 = require("../models/models_0");
const se_AllocateStaticIpCommand = async (input, context) => {
    const headers = sharedHeaders("AllocateStaticIp");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AllocateStaticIpCommand = se_AllocateStaticIpCommand;
const se_AttachCertificateToDistributionCommand = async (input, context) => {
    const headers = sharedHeaders("AttachCertificateToDistribution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AttachCertificateToDistributionCommand = se_AttachCertificateToDistributionCommand;
const se_AttachDiskCommand = async (input, context) => {
    const headers = sharedHeaders("AttachDisk");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AttachDiskCommand = se_AttachDiskCommand;
const se_AttachInstancesToLoadBalancerCommand = async (input, context) => {
    const headers = sharedHeaders("AttachInstancesToLoadBalancer");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AttachInstancesToLoadBalancerCommand = se_AttachInstancesToLoadBalancerCommand;
const se_AttachLoadBalancerTlsCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("AttachLoadBalancerTlsCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AttachLoadBalancerTlsCertificateCommand = se_AttachLoadBalancerTlsCertificateCommand;
const se_AttachStaticIpCommand = async (input, context) => {
    const headers = sharedHeaders("AttachStaticIp");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AttachStaticIpCommand = se_AttachStaticIpCommand;
const se_CloseInstancePublicPortsCommand = async (input, context) => {
    const headers = sharedHeaders("CloseInstancePublicPorts");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CloseInstancePublicPortsCommand = se_CloseInstancePublicPortsCommand;
const se_CopySnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CopySnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CopySnapshotCommand = se_CopySnapshotCommand;
const se_CreateBucketCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBucket");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateBucketCommand = se_CreateBucketCommand;
const se_CreateBucketAccessKeyCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBucketAccessKey");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateBucketAccessKeyCommand = se_CreateBucketAccessKeyCommand;
const se_CreateCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateCertificateCommand = se_CreateCertificateCommand;
const se_CreateCloudFormationStackCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCloudFormationStack");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateCloudFormationStackCommand = se_CreateCloudFormationStackCommand;
const se_CreateContactMethodCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContactMethod");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateContactMethodCommand = se_CreateContactMethodCommand;
const se_CreateContainerServiceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContainerService");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateContainerServiceCommand = se_CreateContainerServiceCommand;
const se_CreateContainerServiceDeploymentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContainerServiceDeployment");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateContainerServiceDeploymentCommand = se_CreateContainerServiceDeploymentCommand;
const se_CreateContainerServiceRegistryLoginCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContainerServiceRegistryLogin");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateContainerServiceRegistryLoginCommand = se_CreateContainerServiceRegistryLoginCommand;
const se_CreateDiskCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDisk");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDiskCommand = se_CreateDiskCommand;
const se_CreateDiskFromSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDiskFromSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDiskFromSnapshotCommand = se_CreateDiskFromSnapshotCommand;
const se_CreateDiskSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDiskSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDiskSnapshotCommand = se_CreateDiskSnapshotCommand;
const se_CreateDistributionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDistribution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDistributionCommand = se_CreateDistributionCommand;
const se_CreateDomainCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDomain");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDomainCommand = se_CreateDomainCommand;
const se_CreateDomainEntryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDomainEntry");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDomainEntryCommand = se_CreateDomainEntryCommand;
const se_CreateGUISessionAccessDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("CreateGUISessionAccessDetails");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateGUISessionAccessDetailsCommand = se_CreateGUISessionAccessDetailsCommand;
const se_CreateInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInstances");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateInstancesCommand = se_CreateInstancesCommand;
const se_CreateInstancesFromSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInstancesFromSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateInstancesFromSnapshotCommand = se_CreateInstancesFromSnapshotCommand;
const se_CreateInstanceSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInstanceSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateInstanceSnapshotCommand = se_CreateInstanceSnapshotCommand;
const se_CreateKeyPairCommand = async (input, context) => {
    const headers = sharedHeaders("CreateKeyPair");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateKeyPairCommand = se_CreateKeyPairCommand;
const se_CreateLoadBalancerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLoadBalancer");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateLoadBalancerCommand = se_CreateLoadBalancerCommand;
const se_CreateLoadBalancerTlsCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLoadBalancerTlsCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateLoadBalancerTlsCertificateCommand = se_CreateLoadBalancerTlsCertificateCommand;
const se_CreateRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRelationalDatabase");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateRelationalDatabaseCommand = se_CreateRelationalDatabaseCommand;
const se_CreateRelationalDatabaseFromSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRelationalDatabaseFromSnapshot");
    let body;
    body = JSON.stringify(se_CreateRelationalDatabaseFromSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateRelationalDatabaseFromSnapshotCommand = se_CreateRelationalDatabaseFromSnapshotCommand;
const se_CreateRelationalDatabaseSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRelationalDatabaseSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateRelationalDatabaseSnapshotCommand = se_CreateRelationalDatabaseSnapshotCommand;
const se_DeleteAlarmCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAlarm");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteAlarmCommand = se_DeleteAlarmCommand;
const se_DeleteAutoSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAutoSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteAutoSnapshotCommand = se_DeleteAutoSnapshotCommand;
const se_DeleteBucketCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBucket");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteBucketCommand = se_DeleteBucketCommand;
const se_DeleteBucketAccessKeyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBucketAccessKey");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteBucketAccessKeyCommand = se_DeleteBucketAccessKeyCommand;
const se_DeleteCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteCertificateCommand = se_DeleteCertificateCommand;
const se_DeleteContactMethodCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteContactMethod");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteContactMethodCommand = se_DeleteContactMethodCommand;
const se_DeleteContainerImageCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteContainerImage");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteContainerImageCommand = se_DeleteContainerImageCommand;
const se_DeleteContainerServiceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteContainerService");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteContainerServiceCommand = se_DeleteContainerServiceCommand;
const se_DeleteDiskCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDisk");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDiskCommand = se_DeleteDiskCommand;
const se_DeleteDiskSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDiskSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDiskSnapshotCommand = se_DeleteDiskSnapshotCommand;
const se_DeleteDistributionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDistribution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDistributionCommand = se_DeleteDistributionCommand;
const se_DeleteDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDomain");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDomainCommand = se_DeleteDomainCommand;
const se_DeleteDomainEntryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDomainEntry");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDomainEntryCommand = se_DeleteDomainEntryCommand;
const se_DeleteInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteInstance");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteInstanceCommand = se_DeleteInstanceCommand;
const se_DeleteInstanceSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteInstanceSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteInstanceSnapshotCommand = se_DeleteInstanceSnapshotCommand;
const se_DeleteKeyPairCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteKeyPair");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteKeyPairCommand = se_DeleteKeyPairCommand;
const se_DeleteKnownHostKeysCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteKnownHostKeys");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteKnownHostKeysCommand = se_DeleteKnownHostKeysCommand;
const se_DeleteLoadBalancerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLoadBalancer");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteLoadBalancerCommand = se_DeleteLoadBalancerCommand;
const se_DeleteLoadBalancerTlsCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLoadBalancerTlsCertificate");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteLoadBalancerTlsCertificateCommand = se_DeleteLoadBalancerTlsCertificateCommand;
const se_DeleteRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRelationalDatabase");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRelationalDatabaseCommand = se_DeleteRelationalDatabaseCommand;
const se_DeleteRelationalDatabaseSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRelationalDatabaseSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRelationalDatabaseSnapshotCommand = se_DeleteRelationalDatabaseSnapshotCommand;
const se_DetachCertificateFromDistributionCommand = async (input, context) => {
    const headers = sharedHeaders("DetachCertificateFromDistribution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DetachCertificateFromDistributionCommand = se_DetachCertificateFromDistributionCommand;
const se_DetachDiskCommand = async (input, context) => {
    const headers = sharedHeaders("DetachDisk");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DetachDiskCommand = se_DetachDiskCommand;
const se_DetachInstancesFromLoadBalancerCommand = async (input, context) => {
    const headers = sharedHeaders("DetachInstancesFromLoadBalancer");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DetachInstancesFromLoadBalancerCommand = se_DetachInstancesFromLoadBalancerCommand;
const se_DetachStaticIpCommand = async (input, context) => {
    const headers = sharedHeaders("DetachStaticIp");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DetachStaticIpCommand = se_DetachStaticIpCommand;
const se_DisableAddOnCommand = async (input, context) => {
    const headers = sharedHeaders("DisableAddOn");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DisableAddOnCommand = se_DisableAddOnCommand;
const se_DownloadDefaultKeyPairCommand = async (input, context) => {
    const headers = sharedHeaders("DownloadDefaultKeyPair");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DownloadDefaultKeyPairCommand = se_DownloadDefaultKeyPairCommand;
const se_EnableAddOnCommand = async (input, context) => {
    const headers = sharedHeaders("EnableAddOn");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_EnableAddOnCommand = se_EnableAddOnCommand;
const se_ExportSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("ExportSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ExportSnapshotCommand = se_ExportSnapshotCommand;
const se_GetActiveNamesCommand = async (input, context) => {
    const headers = sharedHeaders("GetActiveNames");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetActiveNamesCommand = se_GetActiveNamesCommand;
const se_GetAlarmsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAlarms");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAlarmsCommand = se_GetAlarmsCommand;
const se_GetAutoSnapshotsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAutoSnapshots");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAutoSnapshotsCommand = se_GetAutoSnapshotsCommand;
const se_GetBlueprintsCommand = async (input, context) => {
    const headers = sharedHeaders("GetBlueprints");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBlueprintsCommand = se_GetBlueprintsCommand;
const se_GetBucketAccessKeysCommand = async (input, context) => {
    const headers = sharedHeaders("GetBucketAccessKeys");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBucketAccessKeysCommand = se_GetBucketAccessKeysCommand;
const se_GetBucketBundlesCommand = async (input, context) => {
    const headers = sharedHeaders("GetBucketBundles");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBucketBundlesCommand = se_GetBucketBundlesCommand;
const se_GetBucketMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetBucketMetricData");
    let body;
    body = JSON.stringify(se_GetBucketMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBucketMetricDataCommand = se_GetBucketMetricDataCommand;
const se_GetBucketsCommand = async (input, context) => {
    const headers = sharedHeaders("GetBuckets");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBucketsCommand = se_GetBucketsCommand;
const se_GetBundlesCommand = async (input, context) => {
    const headers = sharedHeaders("GetBundles");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBundlesCommand = se_GetBundlesCommand;
const se_GetCertificatesCommand = async (input, context) => {
    const headers = sharedHeaders("GetCertificates");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCertificatesCommand = se_GetCertificatesCommand;
const se_GetCloudFormationStackRecordsCommand = async (input, context) => {
    const headers = sharedHeaders("GetCloudFormationStackRecords");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCloudFormationStackRecordsCommand = se_GetCloudFormationStackRecordsCommand;
const se_GetContactMethodsCommand = async (input, context) => {
    const headers = sharedHeaders("GetContactMethods");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContactMethodsCommand = se_GetContactMethodsCommand;
const se_GetContainerAPIMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerAPIMetadata");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerAPIMetadataCommand = se_GetContainerAPIMetadataCommand;
const se_GetContainerImagesCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerImages");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerImagesCommand = se_GetContainerImagesCommand;
const se_GetContainerLogCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerLog");
    let body;
    body = JSON.stringify(se_GetContainerLogRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerLogCommand = se_GetContainerLogCommand;
const se_GetContainerServiceDeploymentsCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerServiceDeployments");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerServiceDeploymentsCommand = se_GetContainerServiceDeploymentsCommand;
const se_GetContainerServiceMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerServiceMetricData");
    let body;
    body = JSON.stringify(se_GetContainerServiceMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerServiceMetricDataCommand = se_GetContainerServiceMetricDataCommand;
const se_GetContainerServicePowersCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerServicePowers");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerServicePowersCommand = se_GetContainerServicePowersCommand;
const se_GetContainerServicesCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerServices");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerServicesCommand = se_GetContainerServicesCommand;
const se_GetCostEstimateCommand = async (input, context) => {
    const headers = sharedHeaders("GetCostEstimate");
    let body;
    body = JSON.stringify(se_GetCostEstimateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCostEstimateCommand = se_GetCostEstimateCommand;
const se_GetDiskCommand = async (input, context) => {
    const headers = sharedHeaders("GetDisk");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDiskCommand = se_GetDiskCommand;
const se_GetDisksCommand = async (input, context) => {
    const headers = sharedHeaders("GetDisks");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDisksCommand = se_GetDisksCommand;
const se_GetDiskSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("GetDiskSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDiskSnapshotCommand = se_GetDiskSnapshotCommand;
const se_GetDiskSnapshotsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDiskSnapshots");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDiskSnapshotsCommand = se_GetDiskSnapshotsCommand;
const se_GetDistributionBundlesCommand = async (input, context) => {
    const headers = sharedHeaders("GetDistributionBundles");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDistributionBundlesCommand = se_GetDistributionBundlesCommand;
const se_GetDistributionLatestCacheResetCommand = async (input, context) => {
    const headers = sharedHeaders("GetDistributionLatestCacheReset");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDistributionLatestCacheResetCommand = se_GetDistributionLatestCacheResetCommand;
const se_GetDistributionMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetDistributionMetricData");
    let body;
    body = JSON.stringify(se_GetDistributionMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDistributionMetricDataCommand = se_GetDistributionMetricDataCommand;
const se_GetDistributionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDistributions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDistributionsCommand = se_GetDistributionsCommand;
const se_GetDomainCommand = async (input, context) => {
    const headers = sharedHeaders("GetDomain");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDomainCommand = se_GetDomainCommand;
const se_GetDomainsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDomains");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDomainsCommand = se_GetDomainsCommand;
const se_GetExportSnapshotRecordsCommand = async (input, context) => {
    const headers = sharedHeaders("GetExportSnapshotRecords");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetExportSnapshotRecordsCommand = se_GetExportSnapshotRecordsCommand;
const se_GetInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstance");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstanceCommand = se_GetInstanceCommand;
const se_GetInstanceAccessDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstanceAccessDetails");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstanceAccessDetailsCommand = se_GetInstanceAccessDetailsCommand;
const se_GetInstanceMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstanceMetricData");
    let body;
    body = JSON.stringify(se_GetInstanceMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstanceMetricDataCommand = se_GetInstanceMetricDataCommand;
const se_GetInstancePortStatesCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstancePortStates");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstancePortStatesCommand = se_GetInstancePortStatesCommand;
const se_GetInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstances");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstancesCommand = se_GetInstancesCommand;
const se_GetInstanceSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstanceSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstanceSnapshotCommand = se_GetInstanceSnapshotCommand;
const se_GetInstanceSnapshotsCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstanceSnapshots");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstanceSnapshotsCommand = se_GetInstanceSnapshotsCommand;
const se_GetInstanceStateCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstanceState");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstanceStateCommand = se_GetInstanceStateCommand;
const se_GetKeyPairCommand = async (input, context) => {
    const headers = sharedHeaders("GetKeyPair");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetKeyPairCommand = se_GetKeyPairCommand;
const se_GetKeyPairsCommand = async (input, context) => {
    const headers = sharedHeaders("GetKeyPairs");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetKeyPairsCommand = se_GetKeyPairsCommand;
const se_GetLoadBalancerCommand = async (input, context) => {
    const headers = sharedHeaders("GetLoadBalancer");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetLoadBalancerCommand = se_GetLoadBalancerCommand;
const se_GetLoadBalancerMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetLoadBalancerMetricData");
    let body;
    body = JSON.stringify(se_GetLoadBalancerMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetLoadBalancerMetricDataCommand = se_GetLoadBalancerMetricDataCommand;
const se_GetLoadBalancersCommand = async (input, context) => {
    const headers = sharedHeaders("GetLoadBalancers");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetLoadBalancersCommand = se_GetLoadBalancersCommand;
const se_GetLoadBalancerTlsCertificatesCommand = async (input, context) => {
    const headers = sharedHeaders("GetLoadBalancerTlsCertificates");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetLoadBalancerTlsCertificatesCommand = se_GetLoadBalancerTlsCertificatesCommand;
const se_GetLoadBalancerTlsPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("GetLoadBalancerTlsPolicies");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetLoadBalancerTlsPoliciesCommand = se_GetLoadBalancerTlsPoliciesCommand;
const se_GetOperationCommand = async (input, context) => {
    const headers = sharedHeaders("GetOperation");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOperationCommand = se_GetOperationCommand;
const se_GetOperationsCommand = async (input, context) => {
    const headers = sharedHeaders("GetOperations");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOperationsCommand = se_GetOperationsCommand;
const se_GetOperationsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("GetOperationsForResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOperationsForResourceCommand = se_GetOperationsForResourceCommand;
const se_GetRegionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRegions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRegionsCommand = se_GetRegionsCommand;
const se_GetRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabase");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseCommand = se_GetRelationalDatabaseCommand;
const se_GetRelationalDatabaseBlueprintsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseBlueprints");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseBlueprintsCommand = se_GetRelationalDatabaseBlueprintsCommand;
const se_GetRelationalDatabaseBundlesCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseBundles");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseBundlesCommand = se_GetRelationalDatabaseBundlesCommand;
const se_GetRelationalDatabaseEventsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseEvents");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseEventsCommand = se_GetRelationalDatabaseEventsCommand;
const se_GetRelationalDatabaseLogEventsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseLogEvents");
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseLogEventsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseLogEventsCommand = se_GetRelationalDatabaseLogEventsCommand;
const se_GetRelationalDatabaseLogStreamsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseLogStreams");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseLogStreamsCommand = se_GetRelationalDatabaseLogStreamsCommand;
const se_GetRelationalDatabaseMasterUserPasswordCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseMasterUserPassword");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseMasterUserPasswordCommand = se_GetRelationalDatabaseMasterUserPasswordCommand;
const se_GetRelationalDatabaseMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseMetricData");
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseMetricDataCommand = se_GetRelationalDatabaseMetricDataCommand;
const se_GetRelationalDatabaseParametersCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseParameters");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseParametersCommand = se_GetRelationalDatabaseParametersCommand;
const se_GetRelationalDatabasesCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabases");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabasesCommand = se_GetRelationalDatabasesCommand;
const se_GetRelationalDatabaseSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseSnapshotCommand = se_GetRelationalDatabaseSnapshotCommand;
const se_GetRelationalDatabaseSnapshotsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseSnapshots");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseSnapshotsCommand = se_GetRelationalDatabaseSnapshotsCommand;
const se_GetStaticIpCommand = async (input, context) => {
    const headers = sharedHeaders("GetStaticIp");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetStaticIpCommand = se_GetStaticIpCommand;
const se_GetStaticIpsCommand = async (input, context) => {
    const headers = sharedHeaders("GetStaticIps");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetStaticIpsCommand = se_GetStaticIpsCommand;
const se_ImportKeyPairCommand = async (input, context) => {
    const headers = sharedHeaders("ImportKeyPair");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ImportKeyPairCommand = se_ImportKeyPairCommand;
const se_IsVpcPeeredCommand = async (input, context) => {
    const headers = sharedHeaders("IsVpcPeered");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_IsVpcPeeredCommand = se_IsVpcPeeredCommand;
const se_OpenInstancePublicPortsCommand = async (input, context) => {
    const headers = sharedHeaders("OpenInstancePublicPorts");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_OpenInstancePublicPortsCommand = se_OpenInstancePublicPortsCommand;
const se_PeerVpcCommand = async (input, context) => {
    const headers = sharedHeaders("PeerVpc");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PeerVpcCommand = se_PeerVpcCommand;
const se_PutAlarmCommand = async (input, context) => {
    const headers = sharedHeaders("PutAlarm");
    let body;
    body = JSON.stringify(se_PutAlarmRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutAlarmCommand = se_PutAlarmCommand;
const se_PutInstancePublicPortsCommand = async (input, context) => {
    const headers = sharedHeaders("PutInstancePublicPorts");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutInstancePublicPortsCommand = se_PutInstancePublicPortsCommand;
const se_RebootInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("RebootInstance");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RebootInstanceCommand = se_RebootInstanceCommand;
const se_RebootRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("RebootRelationalDatabase");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RebootRelationalDatabaseCommand = se_RebootRelationalDatabaseCommand;
const se_RegisterContainerImageCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterContainerImage");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RegisterContainerImageCommand = se_RegisterContainerImageCommand;
const se_ReleaseStaticIpCommand = async (input, context) => {
    const headers = sharedHeaders("ReleaseStaticIp");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ReleaseStaticIpCommand = se_ReleaseStaticIpCommand;
const se_ResetDistributionCacheCommand = async (input, context) => {
    const headers = sharedHeaders("ResetDistributionCache");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ResetDistributionCacheCommand = se_ResetDistributionCacheCommand;
const se_SendContactMethodVerificationCommand = async (input, context) => {
    const headers = sharedHeaders("SendContactMethodVerification");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SendContactMethodVerificationCommand = se_SendContactMethodVerificationCommand;
const se_SetIpAddressTypeCommand = async (input, context) => {
    const headers = sharedHeaders("SetIpAddressType");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SetIpAddressTypeCommand = se_SetIpAddressTypeCommand;
const se_SetResourceAccessForBucketCommand = async (input, context) => {
    const headers = sharedHeaders("SetResourceAccessForBucket");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SetResourceAccessForBucketCommand = se_SetResourceAccessForBucketCommand;
const se_StartGUISessionCommand = async (input, context) => {
    const headers = sharedHeaders("StartGUISession");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartGUISessionCommand = se_StartGUISessionCommand;
const se_StartInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("StartInstance");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartInstanceCommand = se_StartInstanceCommand;
const se_StartRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("StartRelationalDatabase");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartRelationalDatabaseCommand = se_StartRelationalDatabaseCommand;
const se_StopGUISessionCommand = async (input, context) => {
    const headers = sharedHeaders("StopGUISession");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopGUISessionCommand = se_StopGUISessionCommand;
const se_StopInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("StopInstance");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopInstanceCommand = se_StopInstanceCommand;
const se_StopRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("StopRelationalDatabase");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopRelationalDatabaseCommand = se_StopRelationalDatabaseCommand;
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_TestAlarmCommand = async (input, context) => {
    const headers = sharedHeaders("TestAlarm");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TestAlarmCommand = se_TestAlarmCommand;
const se_UnpeerVpcCommand = async (input, context) => {
    const headers = sharedHeaders("UnpeerVpc");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UnpeerVpcCommand = se_UnpeerVpcCommand;
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const se_UpdateBucketCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateBucket");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateBucketCommand = se_UpdateBucketCommand;
const se_UpdateBucketBundleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateBucketBundle");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateBucketBundleCommand = se_UpdateBucketBundleCommand;
const se_UpdateContainerServiceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateContainerService");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateContainerServiceCommand = se_UpdateContainerServiceCommand;
const se_UpdateDistributionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDistribution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateDistributionCommand = se_UpdateDistributionCommand;
const se_UpdateDistributionBundleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDistributionBundle");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateDistributionBundleCommand = se_UpdateDistributionBundleCommand;
const se_UpdateDomainEntryCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDomainEntry");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateDomainEntryCommand = se_UpdateDomainEntryCommand;
const se_UpdateInstanceMetadataOptionsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateInstanceMetadataOptions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateInstanceMetadataOptionsCommand = se_UpdateInstanceMetadataOptionsCommand;
const se_UpdateLoadBalancerAttributeCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateLoadBalancerAttribute");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateLoadBalancerAttributeCommand = se_UpdateLoadBalancerAttributeCommand;
const se_UpdateRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRelationalDatabase");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateRelationalDatabaseCommand = se_UpdateRelationalDatabaseCommand;
const se_UpdateRelationalDatabaseParametersCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRelationalDatabaseParameters");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateRelationalDatabaseParametersCommand = se_UpdateRelationalDatabaseParametersCommand;
const de_AllocateStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AllocateStaticIpCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AllocateStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_AllocateStaticIpCommand = de_AllocateStaticIpCommand;
const de_AllocateStaticIpCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AttachCertificateToDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachCertificateToDistributionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachCertificateToDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_AttachCertificateToDistributionCommand = de_AttachCertificateToDistributionCommand;
const de_AttachCertificateToDistributionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AttachDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachDiskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_AttachDiskCommand = de_AttachDiskCommand;
const de_AttachDiskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AttachInstancesToLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachInstancesToLoadBalancerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachInstancesToLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_AttachInstancesToLoadBalancerCommand = de_AttachInstancesToLoadBalancerCommand;
const de_AttachInstancesToLoadBalancerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AttachLoadBalancerTlsCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachLoadBalancerTlsCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachLoadBalancerTlsCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_AttachLoadBalancerTlsCertificateCommand = de_AttachLoadBalancerTlsCertificateCommand;
const de_AttachLoadBalancerTlsCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AttachStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachStaticIpCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_AttachStaticIpCommand = de_AttachStaticIpCommand;
const de_AttachStaticIpCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CloseInstancePublicPortsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CloseInstancePublicPortsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CloseInstancePublicPortsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CloseInstancePublicPortsCommand = de_CloseInstancePublicPortsCommand;
const de_CloseInstancePublicPortsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CopySnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CopySnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CopySnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CopySnapshotCommand = de_CopySnapshotCommand;
const de_CopySnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateBucketCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateBucketCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateBucketResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateBucketCommand = de_CreateBucketCommand;
const de_CreateBucketCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateBucketAccessKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateBucketAccessKeyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateBucketAccessKeyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateBucketAccessKeyCommand = de_CreateBucketAccessKeyCommand;
const de_CreateBucketAccessKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateCertificateCommand = de_CreateCertificateCommand;
const de_CreateCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateCloudFormationStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCloudFormationStackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCloudFormationStackResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateCloudFormationStackCommand = de_CreateCloudFormationStackCommand;
const de_CreateCloudFormationStackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateContactMethodCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateContactMethodCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContactMethodResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateContactMethodCommand = de_CreateContactMethodCommand;
const de_CreateContactMethodCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateContainerServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateContainerServiceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContainerServiceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateContainerServiceCommand = de_CreateContainerServiceCommand;
const de_CreateContainerServiceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateContainerServiceDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateContainerServiceDeploymentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContainerServiceDeploymentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateContainerServiceDeploymentCommand = de_CreateContainerServiceDeploymentCommand;
const de_CreateContainerServiceDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateContainerServiceRegistryLoginCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateContainerServiceRegistryLoginCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContainerServiceRegistryLoginResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateContainerServiceRegistryLoginCommand = de_CreateContainerServiceRegistryLoginCommand;
const de_CreateContainerServiceRegistryLoginCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDiskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDiskCommand = de_CreateDiskCommand;
const de_CreateDiskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateDiskFromSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDiskFromSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDiskFromSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDiskFromSnapshotCommand = de_CreateDiskFromSnapshotCommand;
const de_CreateDiskFromSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateDiskSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDiskSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDiskSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDiskSnapshotCommand = de_CreateDiskSnapshotCommand;
const de_CreateDiskSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDistributionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDistributionCommand = de_CreateDistributionCommand;
const de_CreateDistributionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDomainCommand = de_CreateDomainCommand;
const de_CreateDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateDomainEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDomainEntryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDomainEntryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateDomainEntryCommand = de_CreateDomainEntryCommand;
const de_CreateDomainEntryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateGUISessionAccessDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateGUISessionAccessDetailsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateGUISessionAccessDetailsCommand = de_CreateGUISessionAccessDetailsCommand;
const de_CreateGUISessionAccessDetailsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateInstancesCommand = de_CreateInstancesCommand;
const de_CreateInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateInstancesFromSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateInstancesFromSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateInstancesFromSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateInstancesFromSnapshotCommand = de_CreateInstancesFromSnapshotCommand;
const de_CreateInstancesFromSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateInstanceSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateInstanceSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateInstanceSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateInstanceSnapshotCommand = de_CreateInstanceSnapshotCommand;
const de_CreateInstanceSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateKeyPairCommand = de_CreateKeyPairCommand;
const de_CreateKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateLoadBalancerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateLoadBalancerCommand = de_CreateLoadBalancerCommand;
const de_CreateLoadBalancerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateLoadBalancerTlsCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateLoadBalancerTlsCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLoadBalancerTlsCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateLoadBalancerTlsCertificateCommand = de_CreateLoadBalancerTlsCertificateCommand;
const de_CreateLoadBalancerTlsCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateRelationalDatabaseCommand = de_CreateRelationalDatabaseCommand;
const de_CreateRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateRelationalDatabaseFromSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateRelationalDatabaseFromSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRelationalDatabaseFromSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateRelationalDatabaseFromSnapshotCommand = de_CreateRelationalDatabaseFromSnapshotCommand;
const de_CreateRelationalDatabaseFromSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateRelationalDatabaseSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateRelationalDatabaseSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRelationalDatabaseSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateRelationalDatabaseSnapshotCommand = de_CreateRelationalDatabaseSnapshotCommand;
const de_CreateRelationalDatabaseSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteAlarmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteAlarmCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteAlarmResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteAlarmCommand = de_DeleteAlarmCommand;
const de_DeleteAlarmCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteAutoSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteAutoSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteAutoSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteAutoSnapshotCommand = de_DeleteAutoSnapshotCommand;
const de_DeleteAutoSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteBucketCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteBucketCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteBucketResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteBucketCommand = de_DeleteBucketCommand;
const de_DeleteBucketCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteBucketAccessKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteBucketAccessKeyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteBucketAccessKeyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteBucketAccessKeyCommand = de_DeleteBucketAccessKeyCommand;
const de_DeleteBucketAccessKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteCertificateCommand = de_DeleteCertificateCommand;
const de_DeleteCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteContactMethodCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteContactMethodCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteContactMethodResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteContactMethodCommand = de_DeleteContactMethodCommand;
const de_DeleteContactMethodCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteContainerImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteContainerImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteContainerImageCommand = de_DeleteContainerImageCommand;
const de_DeleteContainerImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteContainerServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteContainerServiceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteContainerServiceCommand = de_DeleteContainerServiceCommand;
const de_DeleteContainerServiceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDiskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDiskCommand = de_DeleteDiskCommand;
const de_DeleteDiskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteDiskSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDiskSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDiskSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDiskSnapshotCommand = de_DeleteDiskSnapshotCommand;
const de_DeleteDiskSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDistributionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDistributionCommand = de_DeleteDistributionCommand;
const de_DeleteDistributionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDomainCommand = de_DeleteDomainCommand;
const de_DeleteDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteDomainEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDomainEntryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDomainEntryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteDomainEntryCommand = de_DeleteDomainEntryCommand;
const de_DeleteDomainEntryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteInstanceCommand = de_DeleteInstanceCommand;
const de_DeleteInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteInstanceSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteInstanceSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteInstanceSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteInstanceSnapshotCommand = de_DeleteInstanceSnapshotCommand;
const de_DeleteInstanceSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteKeyPairCommand = de_DeleteKeyPairCommand;
const de_DeleteKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteKnownHostKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteKnownHostKeysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteKnownHostKeysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteKnownHostKeysCommand = de_DeleteKnownHostKeysCommand;
const de_DeleteKnownHostKeysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteLoadBalancerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteLoadBalancerCommand = de_DeleteLoadBalancerCommand;
const de_DeleteLoadBalancerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteLoadBalancerTlsCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteLoadBalancerTlsCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLoadBalancerTlsCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteLoadBalancerTlsCertificateCommand = de_DeleteLoadBalancerTlsCertificateCommand;
const de_DeleteLoadBalancerTlsCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteRelationalDatabaseCommand = de_DeleteRelationalDatabaseCommand;
const de_DeleteRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteRelationalDatabaseSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRelationalDatabaseSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRelationalDatabaseSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteRelationalDatabaseSnapshotCommand = de_DeleteRelationalDatabaseSnapshotCommand;
const de_DeleteRelationalDatabaseSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DetachCertificateFromDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachCertificateFromDistributionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachCertificateFromDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DetachCertificateFromDistributionCommand = de_DetachCertificateFromDistributionCommand;
const de_DetachCertificateFromDistributionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DetachDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachDiskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DetachDiskCommand = de_DetachDiskCommand;
const de_DetachDiskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DetachInstancesFromLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachInstancesFromLoadBalancerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachInstancesFromLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DetachInstancesFromLoadBalancerCommand = de_DetachInstancesFromLoadBalancerCommand;
const de_DetachInstancesFromLoadBalancerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DetachStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachStaticIpCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DetachStaticIpCommand = de_DetachStaticIpCommand;
const de_DetachStaticIpCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DisableAddOnCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableAddOnCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableAddOnResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DisableAddOnCommand = de_DisableAddOnCommand;
const de_DisableAddOnCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DownloadDefaultKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DownloadDefaultKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DownloadDefaultKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DownloadDefaultKeyPairCommand = de_DownloadDefaultKeyPairCommand;
const de_DownloadDefaultKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_EnableAddOnCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableAddOnCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableAddOnResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_EnableAddOnCommand = de_EnableAddOnCommand;
const de_EnableAddOnCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ExportSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ExportSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ExportSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ExportSnapshotCommand = de_ExportSnapshotCommand;
const de_ExportSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetActiveNamesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetActiveNamesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetActiveNamesCommand = de_GetActiveNamesCommand;
const de_GetActiveNamesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetAlarmsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAlarmsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAlarmsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetAlarmsCommand = de_GetAlarmsCommand;
const de_GetAlarmsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetAutoSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAutoSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAutoSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetAutoSnapshotsCommand = de_GetAutoSnapshotsCommand;
const de_GetAutoSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetBlueprintsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBlueprintsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetBlueprintsCommand = de_GetBlueprintsCommand;
const de_GetBlueprintsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetBucketAccessKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBucketAccessKeysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBucketAccessKeysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetBucketAccessKeysCommand = de_GetBucketAccessKeysCommand;
const de_GetBucketAccessKeysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetBucketBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBucketBundlesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBucketBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetBucketBundlesCommand = de_GetBucketBundlesCommand;
const de_GetBucketBundlesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetBucketMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBucketMetricDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBucketMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetBucketMetricDataCommand = de_GetBucketMetricDataCommand;
const de_GetBucketMetricDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetBucketsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBucketsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBucketsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetBucketsCommand = de_GetBucketsCommand;
const de_GetBucketsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBundlesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetBundlesCommand = de_GetBundlesCommand;
const de_GetBundlesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCertificatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCertificatesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetCertificatesCommand = de_GetCertificatesCommand;
const de_GetCertificatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCloudFormationStackRecordsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCloudFormationStackRecordsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCloudFormationStackRecordsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetCloudFormationStackRecordsCommand = de_GetCloudFormationStackRecordsCommand;
const de_GetCloudFormationStackRecordsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetContactMethodsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContactMethodsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContactMethodsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetContactMethodsCommand = de_GetContactMethodsCommand;
const de_GetContactMethodsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetContainerAPIMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerAPIMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetContainerAPIMetadataCommand = de_GetContainerAPIMetadataCommand;
const de_GetContainerAPIMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetContainerImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerImagesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetContainerImagesCommand = de_GetContainerImagesCommand;
const de_GetContainerImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetContainerLogCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerLogCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerLogResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetContainerLogCommand = de_GetContainerLogCommand;
const de_GetContainerLogCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetContainerServiceDeploymentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerServiceDeploymentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerServiceDeploymentsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetContainerServiceDeploymentsCommand = de_GetContainerServiceDeploymentsCommand;
const de_GetContainerServiceDeploymentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetContainerServiceMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerServiceMetricDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerServiceMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetContainerServiceMetricDataCommand = de_GetContainerServiceMetricDataCommand;
const de_GetContainerServiceMetricDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetContainerServicePowersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerServicePowersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerServicePowersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetContainerServicePowersCommand = de_GetContainerServicePowersCommand;
const de_GetContainerServicePowersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetContainerServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerServicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ContainerServicesListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetContainerServicesCommand = de_GetContainerServicesCommand;
const de_GetContainerServicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCostEstimateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCostEstimateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCostEstimateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetCostEstimateCommand = de_GetCostEstimateCommand;
const de_GetCostEstimateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDiskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDiskCommand = de_GetDiskCommand;
const de_GetDiskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDisksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDisksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDisksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDisksCommand = de_GetDisksCommand;
const de_GetDisksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDiskSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDiskSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDiskSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDiskSnapshotCommand = de_GetDiskSnapshotCommand;
const de_GetDiskSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDiskSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDiskSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDiskSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDiskSnapshotsCommand = de_GetDiskSnapshotsCommand;
const de_GetDiskSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDistributionBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDistributionBundlesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDistributionBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDistributionBundlesCommand = de_GetDistributionBundlesCommand;
const de_GetDistributionBundlesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDistributionLatestCacheResetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDistributionLatestCacheResetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDistributionLatestCacheResetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDistributionLatestCacheResetCommand = de_GetDistributionLatestCacheResetCommand;
const de_GetDistributionLatestCacheResetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDistributionMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDistributionMetricDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDistributionMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDistributionMetricDataCommand = de_GetDistributionMetricDataCommand;
const de_GetDistributionMetricDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDistributionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDistributionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDistributionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDistributionsCommand = de_GetDistributionsCommand;
const de_GetDistributionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDomainCommand = de_GetDomainCommand;
const de_GetDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDomainsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDomainsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDomainsCommand = de_GetDomainsCommand;
const de_GetDomainsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetExportSnapshotRecordsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetExportSnapshotRecordsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetExportSnapshotRecordsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetExportSnapshotRecordsCommand = de_GetExportSnapshotRecordsCommand;
const de_GetExportSnapshotRecordsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetInstanceCommand = de_GetInstanceCommand;
const de_GetInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetInstanceAccessDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceAccessDetailsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceAccessDetailsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetInstanceAccessDetailsCommand = de_GetInstanceAccessDetailsCommand;
const de_GetInstanceAccessDetailsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetInstanceMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceMetricDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetInstanceMetricDataCommand = de_GetInstanceMetricDataCommand;
const de_GetInstanceMetricDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetInstancePortStatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstancePortStatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetInstancePortStatesCommand = de_GetInstancePortStatesCommand;
const de_GetInstancePortStatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetInstancesCommand = de_GetInstancesCommand;
const de_GetInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetInstanceSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetInstanceSnapshotCommand = de_GetInstanceSnapshotCommand;
const de_GetInstanceSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetInstanceSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetInstanceSnapshotsCommand = de_GetInstanceSnapshotsCommand;
const de_GetInstanceSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetInstanceStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceStateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetInstanceStateCommand = de_GetInstanceStateCommand;
const de_GetInstanceStateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetKeyPairCommand = de_GetKeyPairCommand;
const de_GetKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetKeyPairsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetKeyPairsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetKeyPairsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetKeyPairsCommand = de_GetKeyPairsCommand;
const de_GetKeyPairsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLoadBalancerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetLoadBalancerCommand = de_GetLoadBalancerCommand;
const de_GetLoadBalancerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetLoadBalancerMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLoadBalancerMetricDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancerMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetLoadBalancerMetricDataCommand = de_GetLoadBalancerMetricDataCommand;
const de_GetLoadBalancerMetricDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetLoadBalancersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLoadBalancersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetLoadBalancersCommand = de_GetLoadBalancersCommand;
const de_GetLoadBalancersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetLoadBalancerTlsCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLoadBalancerTlsCertificatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancerTlsCertificatesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetLoadBalancerTlsCertificatesCommand = de_GetLoadBalancerTlsCertificatesCommand;
const de_GetLoadBalancerTlsCertificatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetLoadBalancerTlsPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLoadBalancerTlsPoliciesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetLoadBalancerTlsPoliciesCommand = de_GetLoadBalancerTlsPoliciesCommand;
const de_GetLoadBalancerTlsPoliciesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetOperationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetOperationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOperationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetOperationCommand = de_GetOperationCommand;
const de_GetOperationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetOperationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetOperationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOperationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetOperationsCommand = de_GetOperationsCommand;
const de_GetOperationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetOperationsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetOperationsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOperationsForResourceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetOperationsForResourceCommand = de_GetOperationsForResourceCommand;
const de_GetOperationsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRegionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRegionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRegionsCommand = de_GetRegionsCommand;
const de_GetRegionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRelationalDatabaseCommand = de_GetRelationalDatabaseCommand;
const de_GetRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseBlueprintsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseBlueprintsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRelationalDatabaseBlueprintsCommand = de_GetRelationalDatabaseBlueprintsCommand;
const de_GetRelationalDatabaseBlueprintsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseBundlesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRelationalDatabaseBundlesCommand = de_GetRelationalDatabaseBundlesCommand;
const de_GetRelationalDatabaseBundlesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseEventsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseEventsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRelationalDatabaseEventsCommand = de_GetRelationalDatabaseEventsCommand;
const de_GetRelationalDatabaseEventsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseLogEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseLogEventsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseLogEventsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRelationalDatabaseLogEventsCommand = de_GetRelationalDatabaseLogEventsCommand;
const de_GetRelationalDatabaseLogEventsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseLogStreamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseLogStreamsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRelationalDatabaseLogStreamsCommand = de_GetRelationalDatabaseLogStreamsCommand;
const de_GetRelationalDatabaseLogStreamsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseMasterUserPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseMasterUserPasswordCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseMasterUserPasswordResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRelationalDatabaseMasterUserPasswordCommand = de_GetRelationalDatabaseMasterUserPasswordCommand;
const de_GetRelationalDatabaseMasterUserPasswordCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseMetricDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRelationalDatabaseMetricDataCommand = de_GetRelationalDatabaseMetricDataCommand;
const de_GetRelationalDatabaseMetricDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRelationalDatabaseParametersCommand = de_GetRelationalDatabaseParametersCommand;
const de_GetRelationalDatabaseParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRelationalDatabasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabasesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabasesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRelationalDatabasesCommand = de_GetRelationalDatabasesCommand;
const de_GetRelationalDatabasesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRelationalDatabaseSnapshotCommand = de_GetRelationalDatabaseSnapshotCommand;
const de_GetRelationalDatabaseSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRelationalDatabaseSnapshotsCommand = de_GetRelationalDatabaseSnapshotsCommand;
const de_GetRelationalDatabaseSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetStaticIpCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetStaticIpCommand = de_GetStaticIpCommand;
const de_GetStaticIpCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetStaticIpsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetStaticIpsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetStaticIpsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetStaticIpsCommand = de_GetStaticIpsCommand;
const de_GetStaticIpsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ImportKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ImportKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ImportKeyPairCommand = de_ImportKeyPairCommand;
const de_ImportKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_IsVpcPeeredCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_IsVpcPeeredCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_IsVpcPeeredCommand = de_IsVpcPeeredCommand;
const de_IsVpcPeeredCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_OpenInstancePublicPortsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_OpenInstancePublicPortsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_OpenInstancePublicPortsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_OpenInstancePublicPortsCommand = de_OpenInstancePublicPortsCommand;
const de_OpenInstancePublicPortsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PeerVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PeerVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PeerVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PeerVpcCommand = de_PeerVpcCommand;
const de_PeerVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutAlarmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutAlarmCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutAlarmResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutAlarmCommand = de_PutAlarmCommand;
const de_PutAlarmCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutInstancePublicPortsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutInstancePublicPortsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutInstancePublicPortsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutInstancePublicPortsCommand = de_PutInstancePublicPortsCommand;
const de_PutInstancePublicPortsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RebootInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RebootInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RebootInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RebootInstanceCommand = de_RebootInstanceCommand;
const de_RebootInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RebootRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RebootRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RebootRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RebootRelationalDatabaseCommand = de_RebootRelationalDatabaseCommand;
const de_RebootRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RegisterContainerImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterContainerImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterContainerImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RegisterContainerImageCommand = de_RegisterContainerImageCommand;
const de_RegisterContainerImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ReleaseStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReleaseStaticIpCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReleaseStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ReleaseStaticIpCommand = de_ReleaseStaticIpCommand;
const de_ReleaseStaticIpCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ResetDistributionCacheCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResetDistributionCacheCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ResetDistributionCacheResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ResetDistributionCacheCommand = de_ResetDistributionCacheCommand;
const de_ResetDistributionCacheCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_SendContactMethodVerificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SendContactMethodVerificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SendContactMethodVerificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_SendContactMethodVerificationCommand = de_SendContactMethodVerificationCommand;
const de_SendContactMethodVerificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_SetIpAddressTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SetIpAddressTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SetIpAddressTypeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_SetIpAddressTypeCommand = de_SetIpAddressTypeCommand;
const de_SetIpAddressTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_SetResourceAccessForBucketCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SetResourceAccessForBucketCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SetResourceAccessForBucketResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_SetResourceAccessForBucketCommand = de_SetResourceAccessForBucketCommand;
const de_SetResourceAccessForBucketCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartGUISessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartGUISessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartGUISessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartGUISessionCommand = de_StartGUISessionCommand;
const de_StartGUISessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartInstanceCommand = de_StartInstanceCommand;
const de_StartInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartRelationalDatabaseCommand = de_StartRelationalDatabaseCommand;
const de_StartRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopGUISessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopGUISessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopGUISessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopGUISessionCommand = de_StopGUISessionCommand;
const de_StopGUISessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopInstanceCommand = de_StopInstanceCommand;
const de_StopInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopRelationalDatabaseCommand = de_StopRelationalDatabaseCommand;
const de_StopRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TagResourceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TestAlarmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TestAlarmCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TestAlarmResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_TestAlarmCommand = de_TestAlarmCommand;
const de_TestAlarmCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UnpeerVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UnpeerVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UnpeerVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UnpeerVpcCommand = de_UnpeerVpcCommand;
const de_UnpeerVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UntagResourceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateBucketCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateBucketCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateBucketResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateBucketCommand = de_UpdateBucketCommand;
const de_UpdateBucketCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateBucketBundleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateBucketBundleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateBucketBundleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateBucketBundleCommand = de_UpdateBucketBundleCommand;
const de_UpdateBucketBundleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateContainerServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateContainerServiceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateContainerServiceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateContainerServiceCommand = de_UpdateContainerServiceCommand;
const de_UpdateContainerServiceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateDistributionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateDistributionCommand = de_UpdateDistributionCommand;
const de_UpdateDistributionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateDistributionBundleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateDistributionBundleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDistributionBundleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateDistributionBundleCommand = de_UpdateDistributionBundleCommand;
const de_UpdateDistributionBundleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateDomainEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateDomainEntryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDomainEntryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateDomainEntryCommand = de_UpdateDomainEntryCommand;
const de_UpdateDomainEntryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateInstanceMetadataOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateInstanceMetadataOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateInstanceMetadataOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateInstanceMetadataOptionsCommand = de_UpdateInstanceMetadataOptionsCommand;
const de_UpdateInstanceMetadataOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateLoadBalancerAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateLoadBalancerAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateLoadBalancerAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateLoadBalancerAttributeCommand = de_UpdateLoadBalancerAttributeCommand;
const de_UpdateLoadBalancerAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateRelationalDatabaseCommand = de_UpdateRelationalDatabaseCommand;
const de_UpdateRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateRelationalDatabaseParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateRelationalDatabaseParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateRelationalDatabaseParametersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateRelationalDatabaseParametersCommand = de_UpdateRelationalDatabaseParametersCommand;
const de_UpdateRelationalDatabaseParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AccountSetupInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccountSetupInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OperationFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OperationFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnauthenticatedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UnauthenticatedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_CreateRelationalDatabaseFromSnapshotRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        availabilityZone: [],
        publiclyAccessible: [],
        relationalDatabaseBundleId: [],
        relationalDatabaseName: [],
        relationalDatabaseSnapshotName: [],
        restoreTime: (_) => Math.round(_.getTime() / 1000),
        sourceRelationalDatabaseName: [],
        tags: smithy_client_1._json,
        useLatestRestorableTime: [],
    });
};
const se_GetBucketMetricDataRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        bucketName: [],
        endTime: (_) => Math.round(_.getTime() / 1000),
        metricName: [],
        period: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statistics: smithy_client_1._json,
        unit: [],
    });
};
const se_GetContainerLogRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        containerName: [],
        endTime: (_) => Math.round(_.getTime() / 1000),
        filterPattern: [],
        pageToken: [],
        serviceName: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_GetContainerServiceMetricDataRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        metricName: [],
        period: [],
        serviceName: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statistics: smithy_client_1._json,
    });
};
const se_GetCostEstimateRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        resourceName: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_GetDistributionMetricDataRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        distributionName: [],
        endTime: (_) => Math.round(_.getTime() / 1000),
        metricName: [],
        period: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statistics: smithy_client_1._json,
        unit: [],
    });
};
const se_GetInstanceMetricDataRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        instanceName: [],
        metricName: [],
        period: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statistics: smithy_client_1._json,
        unit: [],
    });
};
const se_GetLoadBalancerMetricDataRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        loadBalancerName: [],
        metricName: [],
        period: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statistics: smithy_client_1._json,
        unit: [],
    });
};
const se_GetRelationalDatabaseLogEventsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        logStreamName: [],
        pageToken: [],
        relationalDatabaseName: [],
        startFromHead: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_GetRelationalDatabaseMetricDataRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        metricName: [],
        period: [],
        relationalDatabaseName: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statistics: smithy_client_1._json,
        unit: [],
    });
};
const se_PutAlarmRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        alarmName: [],
        comparisonOperator: [],
        contactProtocols: smithy_client_1._json,
        datapointsToAlarm: [],
        evaluationPeriods: [],
        metricName: [],
        monitoredResourceName: [],
        notificationEnabled: [],
        notificationTriggers: smithy_client_1._json,
        threshold: smithy_client_1.serializeFloat,
        treatMissingData: [],
    });
};
const de_AccessKey = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        accessKeyId: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        lastUsed: (_) => de_AccessKeyLastUsed(_, context),
        secretAccessKey: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
    });
};
const de_AccessKeyLastUsed = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        lastUsedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        region: smithy_client_1.expectString,
        serviceName: smithy_client_1.expectString,
    });
};
const de_AccessKeyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccessKey(entry, context);
    });
    return retVal;
};
const de_AccountLevelBpaSync = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bpaImpactsLightsail: smithy_client_1.expectBoolean,
        lastSyncedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        message: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
    });
};
const de_Alarm = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        comparisonOperator: smithy_client_1.expectString,
        contactProtocols: smithy_client_1._json,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        datapointsToAlarm: smithy_client_1.expectInt32,
        evaluationPeriods: smithy_client_1.expectInt32,
        location: smithy_client_1._json,
        metricName: smithy_client_1.expectString,
        monitoredResourceInfo: smithy_client_1._json,
        name: smithy_client_1.expectString,
        notificationEnabled: smithy_client_1.expectBoolean,
        notificationTriggers: smithy_client_1._json,
        period: smithy_client_1.expectInt32,
        resourceType: smithy_client_1.expectString,
        state: smithy_client_1.expectString,
        statistic: smithy_client_1.expectString,
        supportCode: smithy_client_1.expectString,
        threshold: smithy_client_1.limitedParseDouble,
        treatMissingData: smithy_client_1.expectString,
        unit: smithy_client_1.expectString,
    });
};
const de_AlarmsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Alarm(entry, context);
    });
    return retVal;
};
const de_AllocateStaticIpResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_AttachCertificateToDistributionResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_AttachDiskResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_AttachInstancesToLoadBalancerResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_AttachLoadBalancerTlsCertificateResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_AttachStaticIpResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_AutoSnapshotDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        date: smithy_client_1.expectString,
        fromAttachedDisks: smithy_client_1._json,
        status: smithy_client_1.expectString,
    });
};
const de_AutoSnapshotDetailsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoSnapshotDetails(entry, context);
    });
    return retVal;
};
const de_Bucket = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ableToUpdateBundle: smithy_client_1.expectBoolean,
        accessLogConfig: smithy_client_1._json,
        accessRules: smithy_client_1._json,
        arn: smithy_client_1.expectString,
        bundleId: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        objectVersioning: smithy_client_1.expectString,
        readonlyAccessAccounts: smithy_client_1._json,
        resourceType: smithy_client_1.expectString,
        resourcesReceivingAccess: smithy_client_1._json,
        state: smithy_client_1._json,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
        url: smithy_client_1.expectString,
    });
};
const de_BucketBundle = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bundleId: smithy_client_1.expectString,
        isActive: smithy_client_1.expectBoolean,
        name: smithy_client_1.expectString,
        price: smithy_client_1.limitedParseFloat32,
        storagePerMonthInGb: smithy_client_1.expectInt32,
        transferPerMonthInGb: smithy_client_1.expectInt32,
    });
};
const de_BucketBundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BucketBundle(entry, context);
    });
    return retVal;
};
const de_BucketList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Bucket(entry, context);
    });
    return retVal;
};
const de_Bundle = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bundleId: smithy_client_1.expectString,
        cpuCount: smithy_client_1.expectInt32,
        diskSizeInGb: smithy_client_1.expectInt32,
        instanceType: smithy_client_1.expectString,
        isActive: smithy_client_1.expectBoolean,
        name: smithy_client_1.expectString,
        power: smithy_client_1.expectInt32,
        price: smithy_client_1.limitedParseFloat32,
        ramSizeInGb: smithy_client_1.limitedParseFloat32,
        supportedAppCategories: smithy_client_1._json,
        supportedPlatforms: smithy_client_1._json,
        transferPerMonthInGb: smithy_client_1.expectInt32,
    });
};
const de_BundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Bundle(entry, context);
    });
    return retVal;
};
const de_Certificate = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        domainName: smithy_client_1.expectString,
        domainValidationRecords: smithy_client_1._json,
        eligibleToRenew: smithy_client_1.expectString,
        inUseResourceCount: smithy_client_1.expectInt32,
        issuedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        issuerCA: smithy_client_1.expectString,
        keyAlgorithm: smithy_client_1.expectString,
        name: smithy_client_1.expectString,
        notAfter: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        notBefore: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        renewalSummary: (_) => de_RenewalSummary(_, context),
        requestFailureReason: smithy_client_1.expectString,
        revocationReason: smithy_client_1.expectString,
        revokedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        serialNumber: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
        subjectAlternativeNames: smithy_client_1._json,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
    });
};
const de_CertificateSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        certificateArn: smithy_client_1.expectString,
        certificateDetail: (_) => de_Certificate(_, context),
        certificateName: smithy_client_1.expectString,
        domainName: smithy_client_1.expectString,
        tags: smithy_client_1._json,
    });
};
const de_CertificateSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CertificateSummary(entry, context);
    });
    return retVal;
};
const de_CloseInstancePublicPortsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_CloudFormationStackRecord = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        destinationInfo: smithy_client_1._json,
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        sourceInfo: smithy_client_1._json,
        state: smithy_client_1.expectString,
    });
};
const de_CloudFormationStackRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CloudFormationStackRecord(entry, context);
    });
    return retVal;
};
const de_ContactMethod = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        contactEndpoint: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        protocol: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
        supportCode: smithy_client_1.expectString,
    });
};
const de_ContactMethodsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContactMethod(entry, context);
    });
    return retVal;
};
const de_ContainerImage = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        digest: smithy_client_1.expectString,
        image: smithy_client_1.expectString,
    });
};
const de_ContainerImageList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerImage(entry, context);
    });
    return retVal;
};
const de_ContainerService = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        containerServiceName: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        currentDeployment: (_) => de_ContainerServiceDeployment(_, context),
        isDisabled: smithy_client_1.expectBoolean,
        location: smithy_client_1._json,
        nextDeployment: (_) => de_ContainerServiceDeployment(_, context),
        power: smithy_client_1.expectString,
        powerId: smithy_client_1.expectString,
        principalArn: smithy_client_1.expectString,
        privateDomainName: smithy_client_1.expectString,
        privateRegistryAccess: smithy_client_1._json,
        publicDomainNames: smithy_client_1._json,
        resourceType: smithy_client_1.expectString,
        scale: smithy_client_1.expectInt32,
        state: smithy_client_1.expectString,
        stateDetail: smithy_client_1._json,
        tags: smithy_client_1._json,
        url: smithy_client_1.expectString,
    });
};
const de_ContainerServiceDeployment = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        containers: smithy_client_1._json,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        publicEndpoint: smithy_client_1._json,
        state: smithy_client_1.expectString,
        version: smithy_client_1.expectInt32,
    });
};
const de_ContainerServiceDeploymentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerServiceDeployment(entry, context);
    });
    return retVal;
};
const de_ContainerServiceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerService(entry, context);
    });
    return retVal;
};
const de_ContainerServiceLogEvent = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        message: smithy_client_1.expectString,
    });
};
const de_ContainerServiceLogEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerServiceLogEvent(entry, context);
    });
    return retVal;
};
const de_ContainerServicePower = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        cpuCount: smithy_client_1.limitedParseFloat32,
        isActive: smithy_client_1.expectBoolean,
        name: smithy_client_1.expectString,
        powerId: smithy_client_1.expectString,
        price: smithy_client_1.limitedParseFloat32,
        ramSizeInGb: smithy_client_1.limitedParseFloat32,
    });
};
const de_ContainerServicePowerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerServicePower(entry, context);
    });
    return retVal;
};
const de_ContainerServiceRegistryLogin = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        expiresAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        password: smithy_client_1.expectString,
        registry: smithy_client_1.expectString,
        username: smithy_client_1.expectString,
    });
};
const de_ContainerServicesListResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        containerServices: (_) => de_ContainerServiceList(_, context),
    });
};
const de_CopySnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CostEstimate = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        resultsByTime: (_) => de_EstimatesByTime(_, context),
        usageType: smithy_client_1.expectString,
    });
};
const de_CostEstimates = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CostEstimate(entry, context);
    });
    return retVal;
};
const de_CreateBucketAccessKeyResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        accessKey: (_) => de_AccessKey(_, context),
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateBucketResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bucket: (_) => de_Bucket(_, context),
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateCertificateResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        certificate: (_) => de_CertificateSummary(_, context),
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateCloudFormationStackResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateContactMethodResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateContainerServiceDeploymentResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        containerService: (_) => de_ContainerService(_, context),
    });
};
const de_CreateContainerServiceRegistryLoginResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        registryLogin: (_) => de_ContainerServiceRegistryLogin(_, context),
    });
};
const de_CreateContainerServiceResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        containerService: (_) => de_ContainerService(_, context),
    });
};
const de_CreateDiskFromSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateDiskResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateDiskSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateDistributionResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        distribution: (_) => de_LightsailDistribution(_, context),
        operation: (_) => de_Operation(_, context),
    });
};
const de_CreateDomainEntryResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_CreateDomainResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_CreateInstancesFromSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateInstanceSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateInstancesResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateKeyPairResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        keyPair: (_) => de_KeyPair(_, context),
        operation: (_) => de_Operation(_, context),
        privateKeyBase64: smithy_client_1.expectString,
        publicKeyBase64: smithy_client_1.expectString,
    });
};
const de_CreateLoadBalancerResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateLoadBalancerTlsCertificateResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateRelationalDatabaseFromSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateRelationalDatabaseResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateRelationalDatabaseSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteAlarmResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteAutoSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteBucketAccessKeyResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteBucketResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteCertificateResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteContactMethodResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteDiskResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteDiskSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteDistributionResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_DeleteDomainEntryResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_DeleteDomainResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_DeleteInstanceResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteInstanceSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteKeyPairResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_DeleteKnownHostKeysResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteLoadBalancerResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteLoadBalancerTlsCertificateResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteRelationalDatabaseResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteRelationalDatabaseSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DetachCertificateFromDistributionResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_DetachDiskResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DetachInstancesFromLoadBalancerResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DetachStaticIpResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DisableAddOnResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_Disk = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        addOns: smithy_client_1._json,
        arn: smithy_client_1.expectString,
        attachedTo: smithy_client_1.expectString,
        attachmentState: smithy_client_1.expectString,
        autoMountStatus: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        gbInUse: smithy_client_1.expectInt32,
        iops: smithy_client_1.expectInt32,
        isAttached: smithy_client_1.expectBoolean,
        isSystemDisk: smithy_client_1.expectBoolean,
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        path: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        sizeInGb: smithy_client_1.expectInt32,
        state: smithy_client_1.expectString,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
    });
};
const de_DiskList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Disk(entry, context);
    });
    return retVal;
};
const de_DiskSnapshot = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        fromDiskArn: smithy_client_1.expectString,
        fromDiskName: smithy_client_1.expectString,
        fromInstanceArn: smithy_client_1.expectString,
        fromInstanceName: smithy_client_1.expectString,
        isFromAutoSnapshot: smithy_client_1.expectBoolean,
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        progress: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        sizeInGb: smithy_client_1.expectInt32,
        state: smithy_client_1.expectString,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
    });
};
const de_DiskSnapshotList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DiskSnapshot(entry, context);
    });
    return retVal;
};
const de_DistributionBundle = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bundleId: smithy_client_1.expectString,
        isActive: smithy_client_1.expectBoolean,
        name: smithy_client_1.expectString,
        price: smithy_client_1.limitedParseFloat32,
        transferPerMonthInGb: smithy_client_1.expectInt32,
    });
};
const de_DistributionBundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DistributionBundle(entry, context);
    });
    return retVal;
};
const de_DistributionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LightsailDistribution(entry, context);
    });
    return retVal;
};
const de_Domain = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        domainEntries: smithy_client_1._json,
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        registeredDomainDelegationInfo: smithy_client_1._json,
        resourceType: smithy_client_1.expectString,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
    });
};
const de_DomainList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Domain(entry, context);
    });
    return retVal;
};
const de_DownloadDefaultKeyPairResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        privateKeyBase64: smithy_client_1.expectString,
        publicKeyBase64: smithy_client_1.expectString,
    });
};
const de_EnableAddOnResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_EstimateByTime = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        currency: smithy_client_1.expectString,
        pricingUnit: smithy_client_1.expectString,
        timePeriod: (_) => de_TimePeriod(_, context),
        unit: smithy_client_1.limitedParseDouble,
        usageCost: smithy_client_1.limitedParseDouble,
    });
};
const de_EstimatesByTime = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EstimateByTime(entry, context);
    });
    return retVal;
};
const de_ExportSnapshotRecord = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        destinationInfo: smithy_client_1._json,
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        sourceInfo: (_) => de_ExportSnapshotRecordSourceInfo(_, context),
        state: smithy_client_1.expectString,
    });
};
const de_ExportSnapshotRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExportSnapshotRecord(entry, context);
    });
    return retVal;
};
const de_ExportSnapshotRecordSourceInfo = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        diskSnapshotInfo: smithy_client_1._json,
        fromResourceArn: smithy_client_1.expectString,
        fromResourceName: smithy_client_1.expectString,
        instanceSnapshotInfo: smithy_client_1._json,
        name: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
    });
};
const de_ExportSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_GetAlarmsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        alarms: (_) => de_AlarmsList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetAutoSnapshotsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        autoSnapshots: (_) => de_AutoSnapshotDetailsList(_, context),
        resourceName: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
    });
};
const de_GetBucketAccessKeysResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        accessKeys: (_) => de_AccessKeyList(_, context),
    });
};
const de_GetBucketBundlesResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bundles: (_) => de_BucketBundleList(_, context),
    });
};
const de_GetBucketMetricDataResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        metricData: (_) => de_MetricDatapointList(_, context),
        metricName: smithy_client_1.expectString,
    });
};
const de_GetBucketsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        accountLevelBpaSync: (_) => de_AccountLevelBpaSync(_, context),
        buckets: (_) => de_BucketList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetBundlesResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bundles: (_) => de_BundleList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetCertificatesResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        certificates: (_) => de_CertificateSummaryList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetCloudFormationStackRecordsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        cloudFormationStackRecords: (_) => de_CloudFormationStackRecordList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetContactMethodsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        contactMethods: (_) => de_ContactMethodsList(_, context),
    });
};
const de_GetContainerImagesResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        containerImages: (_) => de_ContainerImageList(_, context),
    });
};
const de_GetContainerLogResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        logEvents: (_) => de_ContainerServiceLogEventList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetContainerServiceDeploymentsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        deployments: (_) => de_ContainerServiceDeploymentList(_, context),
    });
};
const de_GetContainerServiceMetricDataResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        metricData: (_) => de_MetricDatapointList(_, context),
        metricName: smithy_client_1.expectString,
    });
};
const de_GetContainerServicePowersResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        powers: (_) => de_ContainerServicePowerList(_, context),
    });
};
const de_GetCostEstimateResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        resourcesBudgetEstimate: (_) => de_ResourcesBudgetEstimate(_, context),
    });
};
const de_GetDiskResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        disk: (_) => de_Disk(_, context),
    });
};
const de_GetDiskSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        diskSnapshot: (_) => de_DiskSnapshot(_, context),
    });
};
const de_GetDiskSnapshotsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        diskSnapshots: (_) => de_DiskSnapshotList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetDisksResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        disks: (_) => de_DiskList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetDistributionBundlesResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bundles: (_) => de_DistributionBundleList(_, context),
    });
};
const de_GetDistributionLatestCacheResetResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        status: smithy_client_1.expectString,
    });
};
const de_GetDistributionMetricDataResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        metricData: (_) => de_MetricDatapointList(_, context),
        metricName: smithy_client_1.expectString,
    });
};
const de_GetDistributionsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        distributions: (_) => de_DistributionList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetDomainResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        domain: (_) => de_Domain(_, context),
    });
};
const de_GetDomainsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        domains: (_) => de_DomainList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetExportSnapshotRecordsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        exportSnapshotRecords: (_) => de_ExportSnapshotRecordList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetInstanceAccessDetailsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        accessDetails: (_) => de_InstanceAccessDetails(_, context),
    });
};
const de_GetInstanceMetricDataResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        metricData: (_) => de_MetricDatapointList(_, context),
        metricName: smithy_client_1.expectString,
    });
};
const de_GetInstanceResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        instance: (_) => de_Instance(_, context),
    });
};
const de_GetInstanceSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        instanceSnapshot: (_) => de_InstanceSnapshot(_, context),
    });
};
const de_GetInstanceSnapshotsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        instanceSnapshots: (_) => de_InstanceSnapshotList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetInstancesResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        instances: (_) => de_InstanceList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetKeyPairResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        keyPair: (_) => de_KeyPair(_, context),
    });
};
const de_GetKeyPairsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        keyPairs: (_) => de_KeyPairList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetLoadBalancerMetricDataResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        metricData: (_) => de_MetricDatapointList(_, context),
        metricName: smithy_client_1.expectString,
    });
};
const de_GetLoadBalancerResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        loadBalancer: (_) => de_LoadBalancer(_, context),
    });
};
const de_GetLoadBalancersResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        loadBalancers: (_) => de_LoadBalancerList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetLoadBalancerTlsCertificatesResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        tlsCertificates: (_) => de_LoadBalancerTlsCertificateList(_, context),
    });
};
const de_GetOperationResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_GetOperationsForResourceResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextPageCount: smithy_client_1.expectString,
        nextPageToken: smithy_client_1.expectString,
        operations: (_) => de_OperationList(_, context),
    });
};
const de_GetOperationsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextPageToken: smithy_client_1.expectString,
        operations: (_) => de_OperationList(_, context),
    });
};
const de_GetRelationalDatabaseBundlesResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bundles: (_) => de_RelationalDatabaseBundleList(_, context),
        nextPageToken: smithy_client_1.expectString,
    });
};
const de_GetRelationalDatabaseEventsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextPageToken: smithy_client_1.expectString,
        relationalDatabaseEvents: (_) => de_RelationalDatabaseEventList(_, context),
    });
};
const de_GetRelationalDatabaseLogEventsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextBackwardToken: smithy_client_1.expectString,
        nextForwardToken: smithy_client_1.expectString,
        resourceLogEvents: (_) => de_LogEventList(_, context),
    });
};
const de_GetRelationalDatabaseMasterUserPasswordResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        masterUserPassword: smithy_client_1.expectString,
    });
};
const de_GetRelationalDatabaseMetricDataResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        metricData: (_) => de_MetricDatapointList(_, context),
        metricName: smithy_client_1.expectString,
    });
};
const de_GetRelationalDatabaseResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        relationalDatabase: (_) => de_RelationalDatabase(_, context),
    });
};
const de_GetRelationalDatabaseSnapshotResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        relationalDatabaseSnapshot: (_) => de_RelationalDatabaseSnapshot(_, context),
    });
};
const de_GetRelationalDatabaseSnapshotsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextPageToken: smithy_client_1.expectString,
        relationalDatabaseSnapshots: (_) => de_RelationalDatabaseSnapshotList(_, context),
    });
};
const de_GetRelationalDatabasesResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextPageToken: smithy_client_1.expectString,
        relationalDatabases: (_) => de_RelationalDatabaseList(_, context),
    });
};
const de_GetStaticIpResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        staticIp: (_) => de_StaticIp(_, context),
    });
};
const de_GetStaticIpsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextPageToken: smithy_client_1.expectString,
        staticIps: (_) => de_StaticIpList(_, context),
    });
};
const de_HostKeyAttributes = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        algorithm: smithy_client_1.expectString,
        fingerprintSHA1: smithy_client_1.expectString,
        fingerprintSHA256: smithy_client_1.expectString,
        notValidAfter: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        notValidBefore: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        publicKey: smithy_client_1.expectString,
        witnessedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_HostKeysList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HostKeyAttributes(entry, context);
    });
    return retVal;
};
const de_ImportKeyPairResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_Instance = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        addOns: smithy_client_1._json,
        arn: smithy_client_1.expectString,
        blueprintId: smithy_client_1.expectString,
        blueprintName: smithy_client_1.expectString,
        bundleId: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        hardware: (_) => de_InstanceHardware(_, context),
        ipAddressType: smithy_client_1.expectString,
        ipv6Addresses: smithy_client_1._json,
        isStaticIp: smithy_client_1.expectBoolean,
        location: smithy_client_1._json,
        metadataOptions: smithy_client_1._json,
        name: smithy_client_1.expectString,
        networking: smithy_client_1._json,
        privateIpAddress: smithy_client_1.expectString,
        publicIpAddress: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        sshKeyName: smithy_client_1.expectString,
        state: smithy_client_1._json,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
        username: smithy_client_1.expectString,
    });
};
const de_InstanceAccessDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        certKey: smithy_client_1.expectString,
        expiresAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        hostKeys: (_) => de_HostKeysList(_, context),
        instanceName: smithy_client_1.expectString,
        ipAddress: smithy_client_1.expectString,
        password: smithy_client_1.expectString,
        passwordData: smithy_client_1._json,
        privateKey: smithy_client_1.expectString,
        protocol: smithy_client_1.expectString,
        username: smithy_client_1.expectString,
    });
};
const de_InstanceHardware = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        cpuCount: smithy_client_1.expectInt32,
        disks: (_) => de_DiskList(_, context),
        ramSizeInGb: smithy_client_1.limitedParseFloat32,
    });
};
const de_InstanceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Instance(entry, context);
    });
    return retVal;
};
const de_InstanceSnapshot = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        fromAttachedDisks: (_) => de_DiskList(_, context),
        fromBlueprintId: smithy_client_1.expectString,
        fromBundleId: smithy_client_1.expectString,
        fromInstanceArn: smithy_client_1.expectString,
        fromInstanceName: smithy_client_1.expectString,
        isFromAutoSnapshot: smithy_client_1.expectBoolean,
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        progress: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        sizeInGb: smithy_client_1.expectInt32,
        state: smithy_client_1.expectString,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
    });
};
const de_InstanceSnapshotList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceSnapshot(entry, context);
    });
    return retVal;
};
const de_KeyPair = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        fingerprint: smithy_client_1.expectString,
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
    });
};
const de_KeyPairList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KeyPair(entry, context);
    });
    return retVal;
};
const de_LightsailDistribution = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ableToUpdateBundle: smithy_client_1.expectBoolean,
        alternativeDomainNames: smithy_client_1._json,
        arn: smithy_client_1.expectString,
        bundleId: smithy_client_1.expectString,
        cacheBehaviorSettings: smithy_client_1._json,
        cacheBehaviors: smithy_client_1._json,
        certificateName: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        defaultCacheBehavior: smithy_client_1._json,
        domainName: smithy_client_1.expectString,
        ipAddressType: smithy_client_1.expectString,
        isEnabled: smithy_client_1.expectBoolean,
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        origin: smithy_client_1._json,
        originPublicDNS: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
    });
};
const de_LoadBalancer = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        configurationOptions: smithy_client_1._json,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        dnsName: smithy_client_1.expectString,
        healthCheckPath: smithy_client_1.expectString,
        httpsRedirectionEnabled: smithy_client_1.expectBoolean,
        instanceHealthSummary: smithy_client_1._json,
        instancePort: smithy_client_1.expectInt32,
        ipAddressType: smithy_client_1.expectString,
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        protocol: smithy_client_1.expectString,
        publicPorts: smithy_client_1._json,
        resourceType: smithy_client_1.expectString,
        state: smithy_client_1.expectString,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
        tlsCertificateSummaries: smithy_client_1._json,
        tlsPolicyName: smithy_client_1.expectString,
    });
};
const de_LoadBalancerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LoadBalancer(entry, context);
    });
    return retVal;
};
const de_LoadBalancerTlsCertificate = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        domainName: smithy_client_1.expectString,
        domainValidationRecords: smithy_client_1._json,
        failureReason: smithy_client_1.expectString,
        isAttached: smithy_client_1.expectBoolean,
        issuedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        issuer: smithy_client_1.expectString,
        keyAlgorithm: smithy_client_1.expectString,
        loadBalancerName: smithy_client_1.expectString,
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        notAfter: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        notBefore: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        renewalSummary: smithy_client_1._json,
        resourceType: smithy_client_1.expectString,
        revocationReason: smithy_client_1.expectString,
        revokedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        serial: smithy_client_1.expectString,
        signatureAlgorithm: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
        subject: smithy_client_1.expectString,
        subjectAlternativeNames: smithy_client_1._json,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
    });
};
const de_LoadBalancerTlsCertificateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LoadBalancerTlsCertificate(entry, context);
    });
    return retVal;
};
const de_LogEvent = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        message: smithy_client_1.expectString,
    });
};
const de_LogEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LogEvent(entry, context);
    });
    return retVal;
};
const de_MetricDatapoint = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        average: smithy_client_1.limitedParseDouble,
        maximum: smithy_client_1.limitedParseDouble,
        minimum: smithy_client_1.limitedParseDouble,
        sampleCount: smithy_client_1.limitedParseDouble,
        sum: smithy_client_1.limitedParseDouble,
        timestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        unit: smithy_client_1.expectString,
    });
};
const de_MetricDatapointList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricDatapoint(entry, context);
    });
    return retVal;
};
const de_OpenInstancePublicPortsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_Operation = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        errorCode: smithy_client_1.expectString,
        errorDetails: smithy_client_1.expectString,
        id: smithy_client_1.expectString,
        isTerminal: smithy_client_1.expectBoolean,
        location: smithy_client_1._json,
        operationDetails: smithy_client_1.expectString,
        operationType: smithy_client_1.expectString,
        resourceName: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
        statusChangedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_OperationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Operation(entry, context);
    });
    return retVal;
};
const de_PeerVpcResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_PendingMaintenanceAction = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        action: smithy_client_1.expectString,
        currentApplyDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        description: smithy_client_1.expectString,
    });
};
const de_PendingMaintenanceActionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PendingMaintenanceAction(entry, context);
    });
    return retVal;
};
const de_PutAlarmResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_PutInstancePublicPortsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_RebootInstanceResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_RebootRelationalDatabaseResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_RegisterContainerImageResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        containerImage: (_) => de_ContainerImage(_, context),
    });
};
const de_RelationalDatabase = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        backupRetentionEnabled: smithy_client_1.expectBoolean,
        caCertificateIdentifier: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        engine: smithy_client_1.expectString,
        engineVersion: smithy_client_1.expectString,
        hardware: (_) => de_RelationalDatabaseHardware(_, context),
        latestRestorableTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        location: smithy_client_1._json,
        masterDatabaseName: smithy_client_1.expectString,
        masterEndpoint: smithy_client_1._json,
        masterUsername: smithy_client_1.expectString,
        name: smithy_client_1.expectString,
        parameterApplyStatus: smithy_client_1.expectString,
        pendingMaintenanceActions: (_) => de_PendingMaintenanceActionList(_, context),
        pendingModifiedValues: smithy_client_1._json,
        preferredBackupWindow: smithy_client_1.expectString,
        preferredMaintenanceWindow: smithy_client_1.expectString,
        publiclyAccessible: smithy_client_1.expectBoolean,
        relationalDatabaseBlueprintId: smithy_client_1.expectString,
        relationalDatabaseBundleId: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        secondaryAvailabilityZone: smithy_client_1.expectString,
        state: smithy_client_1.expectString,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
    });
};
const de_RelationalDatabaseBundle = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bundleId: smithy_client_1.expectString,
        cpuCount: smithy_client_1.expectInt32,
        diskSizeInGb: smithy_client_1.expectInt32,
        isActive: smithy_client_1.expectBoolean,
        isEncrypted: smithy_client_1.expectBoolean,
        name: smithy_client_1.expectString,
        price: smithy_client_1.limitedParseFloat32,
        ramSizeInGb: smithy_client_1.limitedParseFloat32,
        transferPerMonthInGb: smithy_client_1.expectInt32,
    });
};
const de_RelationalDatabaseBundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RelationalDatabaseBundle(entry, context);
    });
    return retVal;
};
const de_RelationalDatabaseEvent = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        eventCategories: smithy_client_1._json,
        message: smithy_client_1.expectString,
        resource: smithy_client_1.expectString,
    });
};
const de_RelationalDatabaseEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RelationalDatabaseEvent(entry, context);
    });
    return retVal;
};
const de_RelationalDatabaseHardware = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        cpuCount: smithy_client_1.expectInt32,
        diskSizeInGb: smithy_client_1.expectInt32,
        ramSizeInGb: smithy_client_1.limitedParseFloat32,
    });
};
const de_RelationalDatabaseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RelationalDatabase(entry, context);
    });
    return retVal;
};
const de_RelationalDatabaseSnapshot = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        engine: smithy_client_1.expectString,
        engineVersion: smithy_client_1.expectString,
        fromRelationalDatabaseArn: smithy_client_1.expectString,
        fromRelationalDatabaseBlueprintId: smithy_client_1.expectString,
        fromRelationalDatabaseBundleId: smithy_client_1.expectString,
        fromRelationalDatabaseName: smithy_client_1.expectString,
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        sizeInGb: smithy_client_1.expectInt32,
        state: smithy_client_1.expectString,
        supportCode: smithy_client_1.expectString,
        tags: smithy_client_1._json,
    });
};
const de_RelationalDatabaseSnapshotList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RelationalDatabaseSnapshot(entry, context);
    });
    return retVal;
};
const de_ReleaseStaticIpResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_RenewalSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        domainValidationRecords: smithy_client_1._json,
        renewalStatus: smithy_client_1.expectString,
        renewalStatusReason: smithy_client_1.expectString,
        updatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_ResetDistributionCacheResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        createTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        operation: (_) => de_Operation(_, context),
        status: smithy_client_1.expectString,
    });
};
const de_ResourceBudgetEstimate = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        costEstimates: (_) => de_CostEstimates(_, context),
        endTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        resourceName: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        startTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_ResourcesBudgetEstimate = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceBudgetEstimate(entry, context);
    });
    return retVal;
};
const de_SendContactMethodVerificationResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_SetIpAddressTypeResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_SetResourceAccessForBucketResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_StartGUISessionResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_StartInstanceResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_StartRelationalDatabaseResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_StaticIp = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        attachedTo: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ipAddress: smithy_client_1.expectString,
        isAttached: smithy_client_1.expectBoolean,
        location: smithy_client_1._json,
        name: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        supportCode: smithy_client_1.expectString,
    });
};
const de_StaticIpList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StaticIp(entry, context);
    });
    return retVal;
};
const de_StopGUISessionResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_StopInstanceResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_StopRelationalDatabaseResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_TagResourceResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_TestAlarmResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_TimePeriod = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        end: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        start: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_UnpeerVpcResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_UntagResourceResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_UpdateBucketBundleResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_UpdateBucketResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bucket: (_) => de_Bucket(_, context),
        operations: (_) => de_OperationList(_, context),
    });
};
const de_UpdateContainerServiceResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        containerService: (_) => de_ContainerService(_, context),
    });
};
const de_UpdateDistributionBundleResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_UpdateDistributionResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_UpdateDomainEntryResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_UpdateInstanceMetadataOptionsResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_UpdateLoadBalancerAttributeResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_UpdateRelationalDatabaseParametersResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_UpdateRelationalDatabaseResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(LightsailServiceException_1.LightsailServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `Lightsail_20161128.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
