"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateRelationalDatabaseRequestFilterSensitiveLog = exports.GetRelationalDatabaseMasterUserPasswordResultFilterSensitiveLog = exports.ResourceBucketAccess = exports.RelationalDatabaseMetricName = exports.RelationalDatabasePasswordVersion = exports.RelationalDatabaseEngine = exports.LoadBalancerTlsCertificateStatus = exports.LoadBalancerTlsCertificateRevocationReason = exports.LoadBalancerTlsCertificateRenewalStatus = exports.LoadBalancerTlsCertificateFailureReason = exports.LoadBalancerTlsCertificateDomainStatus = exports.LoadBalancerTlsCertificateDnsRecordCreationStateCode = exports.LoadBalancerMetricName = exports.LoadBalancerState = exports.LoadBalancerProtocol = exports.InstanceHealthReason = exports.InstanceHealthState = exports.LoadBalancerAttributeName = exports.InstanceSnapshotState = exports.PortState = exports.InstanceMetricName = exports.InstanceAccessProtocol = exports.PortAccessType = exports.InstanceMetadataState = exports.HttpTokens = exports.HttpProtocolIpv6 = exports.HttpEndpoint = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
exports.HttpEndpoint = {
    disabled: "disabled",
    enabled: "enabled",
};
exports.HttpProtocolIpv6 = {
    disabled: "disabled",
    enabled: "enabled",
};
exports.HttpTokens = {
    optional: "optional",
    required: "required",
};
exports.InstanceMetadataState = {
    applied: "applied",
    pending: "pending",
};
exports.PortAccessType = {
    Private: "Private",
    Public: "Public",
};
exports.InstanceAccessProtocol = {
    rdp: "rdp",
    ssh: "ssh",
};
exports.InstanceMetricName = {
    BurstCapacityPercentage: "BurstCapacityPercentage",
    BurstCapacityTime: "BurstCapacityTime",
    CPUUtilization: "CPUUtilization",
    MetadataNoToken: "MetadataNoToken",
    NetworkIn: "NetworkIn",
    NetworkOut: "NetworkOut",
    StatusCheckFailed: "StatusCheckFailed",
    StatusCheckFailed_Instance: "StatusCheckFailed_Instance",
    StatusCheckFailed_System: "StatusCheckFailed_System",
};
exports.PortState = {
    Closed: "closed",
    Open: "open",
};
exports.InstanceSnapshotState = {
    Available: "available",
    Error: "error",
    Pending: "pending",
};
exports.LoadBalancerAttributeName = {
    HealthCheckPath: "HealthCheckPath",
    HttpsRedirectionEnabled: "HttpsRedirectionEnabled",
    SessionStickinessEnabled: "SessionStickinessEnabled",
    SessionStickiness_LB_CookieDurationSeconds: "SessionStickiness_LB_CookieDurationSeconds",
    TlsPolicyName: "TlsPolicyName",
};
exports.InstanceHealthState = {
    Draining: "draining",
    Healthy: "healthy",
    Initial: "initial",
    Unavailable: "unavailable",
    Unhealthy: "unhealthy",
    Unused: "unused",
};
exports.InstanceHealthReason = {
    InstanceDeregistrationInProgress: "Instance.DeregistrationInProgress",
    InstanceFailedHealthChecks: "Instance.FailedHealthChecks",
    InstanceInvalidState: "Instance.InvalidState",
    InstanceIpUnusable: "Instance.IpUnusable",
    InstanceNotInUse: "Instance.NotInUse",
    InstanceNotRegistered: "Instance.NotRegistered",
    InstanceResponseCodeMismatch: "Instance.ResponseCodeMismatch",
    InstanceTimeout: "Instance.Timeout",
    LbInitialHealthChecking: "Lb.InitialHealthChecking",
    LbInternalError: "Lb.InternalError",
    LbRegistrationInProgress: "Lb.RegistrationInProgress",
};
exports.LoadBalancerProtocol = {
    HTTP: "HTTP",
    HTTP_HTTPS: "HTTP_HTTPS",
};
exports.LoadBalancerState = {
    Active: "active",
    ActiveImpaired: "active_impaired",
    Failed: "failed",
    Provisioning: "provisioning",
    Unknown: "unknown",
};
exports.LoadBalancerMetricName = {
    ClientTLSNegotiationErrorCount: "ClientTLSNegotiationErrorCount",
    HTTPCode_Instance_2XX_Count: "HTTPCode_Instance_2XX_Count",
    HTTPCode_Instance_3XX_Count: "HTTPCode_Instance_3XX_Count",
    HTTPCode_Instance_4XX_Count: "HTTPCode_Instance_4XX_Count",
    HTTPCode_Instance_5XX_Count: "HTTPCode_Instance_5XX_Count",
    HTTPCode_LB_4XX_Count: "HTTPCode_LB_4XX_Count",
    HTTPCode_LB_5XX_Count: "HTTPCode_LB_5XX_Count",
    HealthyHostCount: "HealthyHostCount",
    InstanceResponseTime: "InstanceResponseTime",
    RejectedConnectionCount: "RejectedConnectionCount",
    RequestCount: "RequestCount",
    UnhealthyHostCount: "UnhealthyHostCount",
};
exports.LoadBalancerTlsCertificateDnsRecordCreationStateCode = {
    Failed: "FAILED",
    Started: "STARTED",
    Succeeded: "SUCCEEDED",
};
exports.LoadBalancerTlsCertificateDomainStatus = {
    Failed: "FAILED",
    PendingValidation: "PENDING_VALIDATION",
    Success: "SUCCESS",
};
exports.LoadBalancerTlsCertificateFailureReason = {
    AdditionalVerificationRequired: "ADDITIONAL_VERIFICATION_REQUIRED",
    DomainNotAllowed: "DOMAIN_NOT_ALLOWED",
    InvalidPublicDomain: "INVALID_PUBLIC_DOMAIN",
    NoAvailableContacts: "NO_AVAILABLE_CONTACTS",
    Other: "OTHER",
};
exports.LoadBalancerTlsCertificateRenewalStatus = {
    Failed: "FAILED",
    PendingAutoRenewal: "PENDING_AUTO_RENEWAL",
    PendingValidation: "PENDING_VALIDATION",
    Success: "SUCCESS",
};
exports.LoadBalancerTlsCertificateRevocationReason = {
    AACompromise: "A_A_COMPROMISE",
    AffiliationChanged: "AFFILIATION_CHANGED",
    CaCompromise: "CA_COMPROMISE",
    CertificateHold: "CERTIFICATE_HOLD",
    CessationOfOperation: "CESSATION_OF_OPERATION",
    KeyCompromise: "KEY_COMPROMISE",
    PrivilegeWithdrawn: "PRIVILEGE_WITHDRAWN",
    RemoveFromCrl: "REMOVE_FROM_CRL",
    Superceded: "SUPERCEDED",
    Unspecified: "UNSPECIFIED",
};
exports.LoadBalancerTlsCertificateStatus = {
    Expired: "EXPIRED",
    Failed: "FAILED",
    Inactive: "INACTIVE",
    Issued: "ISSUED",
    PendingValidation: "PENDING_VALIDATION",
    Revoked: "REVOKED",
    Unknown: "UNKNOWN",
    ValidationTimedOut: "VALIDATION_TIMED_OUT",
};
exports.RelationalDatabaseEngine = {
    MYSQL: "mysql",
};
exports.RelationalDatabasePasswordVersion = {
    CURRENT: "CURRENT",
    PENDING: "PENDING",
    PREVIOUS: "PREVIOUS",
};
exports.RelationalDatabaseMetricName = {
    CPUUtilization: "CPUUtilization",
    DatabaseConnections: "DatabaseConnections",
    DiskQueueDepth: "DiskQueueDepth",
    FreeStorageSpace: "FreeStorageSpace",
    NetworkReceiveThroughput: "NetworkReceiveThroughput",
    NetworkTransmitThroughput: "NetworkTransmitThroughput",
};
exports.ResourceBucketAccess = {
    Allow: "allow",
    Deny: "deny",
};
const GetRelationalDatabaseMasterUserPasswordResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.masterUserPassword && { masterUserPassword: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetRelationalDatabaseMasterUserPasswordResultFilterSensitiveLog = GetRelationalDatabaseMasterUserPasswordResultFilterSensitiveLog;
const UpdateRelationalDatabaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.masterUserPassword && { masterUserPassword: smithy_client_1.SENSITIVE_STRING }),
});
exports.UpdateRelationalDatabaseRequestFilterSensitiveLog = UpdateRelationalDatabaseRequestFilterSensitiveLog;
